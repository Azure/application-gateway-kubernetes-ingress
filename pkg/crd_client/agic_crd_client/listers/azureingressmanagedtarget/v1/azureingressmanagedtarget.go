/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/Azure/application-gateway-kubernetes-ingress/pkg/apis/azureingressmanagedtarget/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// AzureIngressManagedTargetLister helps list AzureIngressManagedTargets.
type AzureIngressManagedTargetLister interface {
	// List lists all AzureIngressManagedTargets in the indexer.
	List(selector labels.Selector) (ret []*v1.AzureIngressManagedTarget, err error)
	// AzureIngressManagedTargets returns an object that can list and get AzureIngressManagedTargets.
	AzureIngressManagedTargets(namespace string) AzureIngressManagedTargetNamespaceLister
	AzureIngressManagedTargetListerExpansion
}

// azureIngressManagedTargetLister implements the AzureIngressManagedTargetLister interface.
type azureIngressManagedTargetLister struct {
	indexer cache.Indexer
}

// NewAzureIngressManagedTargetLister returns a new AzureIngressManagedTargetLister.
func NewAzureIngressManagedTargetLister(indexer cache.Indexer) AzureIngressManagedTargetLister {
	return &azureIngressManagedTargetLister{indexer: indexer}
}

// List lists all AzureIngressManagedTargets in the indexer.
func (s *azureIngressManagedTargetLister) List(selector labels.Selector) (ret []*v1.AzureIngressManagedTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AzureIngressManagedTarget))
	})
	return ret, err
}

// AzureIngressManagedTargets returns an object that can list and get AzureIngressManagedTargets.
func (s *azureIngressManagedTargetLister) AzureIngressManagedTargets(namespace string) AzureIngressManagedTargetNamespaceLister {
	return azureIngressManagedTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzureIngressManagedTargetNamespaceLister helps list and get AzureIngressManagedTargets.
type AzureIngressManagedTargetNamespaceLister interface {
	// List lists all AzureIngressManagedTargets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AzureIngressManagedTarget, err error)
	// Get retrieves the AzureIngressManagedTarget from the indexer for a given namespace and name.
	Get(name string) (*v1.AzureIngressManagedTarget, error)
	AzureIngressManagedTargetNamespaceListerExpansion
}

// azureIngressManagedTargetNamespaceLister implements the AzureIngressManagedTargetNamespaceLister
// interface.
type azureIngressManagedTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzureIngressManagedTargets in the indexer for a given namespace.
func (s azureIngressManagedTargetNamespaceLister) List(selector labels.Selector) (ret []*v1.AzureIngressManagedTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AzureIngressManagedTarget))
	})
	return ret, err
}

// Get retrieves the AzureIngressManagedTarget from the indexer for a given namespace and name.
func (s azureIngressManagedTargetNamespaceLister) Get(name string) (*v1.AzureIngressManagedTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("azureingressmanagedtarget"), name)
	}
	return obj.(*v1.AzureIngressManagedTarget), nil
}
