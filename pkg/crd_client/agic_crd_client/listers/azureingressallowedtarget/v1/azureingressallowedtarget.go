/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	v1 "github.com/Azure/application-gateway-kubernetes-ingress/pkg/apis/azureingressallowedtarget/v1"
)

// AzureIngressAllowedTargetLister helps list AzureIngressAllowedTargets.
// All objects returned here must be treated as read-only.
type AzureIngressAllowedTargetLister interface {
	// List lists all AzureIngressAllowedTargets in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AzureIngressAllowedTarget, err error)
	// AzureIngressAllowedTargets returns an object that can list and get AzureIngressAllowedTargets.
	AzureIngressAllowedTargets(namespace string) AzureIngressAllowedTargetNamespaceLister
	AzureIngressAllowedTargetListerExpansion
}

// azureIngressAllowedTargetLister implements the AzureIngressAllowedTargetLister interface.
type azureIngressAllowedTargetLister struct {
	indexer cache.Indexer
}

// NewAzureIngressAllowedTargetLister returns a new AzureIngressAllowedTargetLister.
func NewAzureIngressAllowedTargetLister(indexer cache.Indexer) AzureIngressAllowedTargetLister {
	return &azureIngressAllowedTargetLister{indexer: indexer}
}

// List lists all AzureIngressAllowedTargets in the indexer.
func (s *azureIngressAllowedTargetLister) List(selector labels.Selector) (ret []*v1.AzureIngressAllowedTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AzureIngressAllowedTarget))
	})
	return ret, err
}

// AzureIngressAllowedTargets returns an object that can list and get AzureIngressAllowedTargets.
func (s *azureIngressAllowedTargetLister) AzureIngressAllowedTargets(namespace string) AzureIngressAllowedTargetNamespaceLister {
	return azureIngressAllowedTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzureIngressAllowedTargetNamespaceLister helps list and get AzureIngressAllowedTargets.
// All objects returned here must be treated as read-only.
type AzureIngressAllowedTargetNamespaceLister interface {
	// List lists all AzureIngressAllowedTargets in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.AzureIngressAllowedTarget, err error)
	// Get retrieves the AzureIngressAllowedTarget from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.AzureIngressAllowedTarget, error)
	AzureIngressAllowedTargetNamespaceListerExpansion
}

// azureIngressAllowedTargetNamespaceLister implements the AzureIngressAllowedTargetNamespaceLister
// interface.
type azureIngressAllowedTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzureIngressAllowedTargets in the indexer for a given namespace.
func (s azureIngressAllowedTargetNamespaceLister) List(selector labels.Selector) (ret []*v1.AzureIngressAllowedTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AzureIngressAllowedTarget))
	})
	return ret, err
}

// Get retrieves the AzureIngressAllowedTarget from the indexer for a given namespace and name.
func (s azureIngressAllowedTargetNamespaceLister) Get(name string) (*v1.AzureIngressAllowedTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("azureingressallowedtarget"), name)
	}
	return obj.(*v1.AzureIngressAllowedTarget), nil
}
