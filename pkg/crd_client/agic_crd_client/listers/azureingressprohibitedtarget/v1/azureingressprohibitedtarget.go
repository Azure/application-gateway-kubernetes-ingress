/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"

	v1 "github.com/Azure/application-gateway-kubernetes-ingress/pkg/apis/azureingressprohibitedtarget/v1"
)

// AzureIngressProhibitedTargetLister helps list AzureIngressProhibitedTargets.
type AzureIngressProhibitedTargetLister interface {
	// List lists all AzureIngressProhibitedTargets in the indexer.
	List(selector labels.Selector) (ret []*v1.AzureIngressProhibitedTarget, err error)
	// AzureIngressProhibitedTargets returns an object that can list and get AzureIngressProhibitedTargets.
	AzureIngressProhibitedTargets(namespace string) AzureIngressProhibitedTargetNamespaceLister
	AzureIngressProhibitedTargetListerExpansion
}

// azureIngressProhibitedTargetLister implements the AzureIngressProhibitedTargetLister interface.
type azureIngressProhibitedTargetLister struct {
	indexer cache.Indexer
}

// NewAzureIngressProhibitedTargetLister returns a new AzureIngressProhibitedTargetLister.
func NewAzureIngressProhibitedTargetLister(indexer cache.Indexer) AzureIngressProhibitedTargetLister {
	return &azureIngressProhibitedTargetLister{indexer: indexer}
}

// List lists all AzureIngressProhibitedTargets in the indexer.
func (s *azureIngressProhibitedTargetLister) List(selector labels.Selector) (ret []*v1.AzureIngressProhibitedTarget, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AzureIngressProhibitedTarget))
	})
	return ret, err
}

// AzureIngressProhibitedTargets returns an object that can list and get AzureIngressProhibitedTargets.
func (s *azureIngressProhibitedTargetLister) AzureIngressProhibitedTargets(namespace string) AzureIngressProhibitedTargetNamespaceLister {
	return azureIngressProhibitedTargetNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// AzureIngressProhibitedTargetNamespaceLister helps list and get AzureIngressProhibitedTargets.
type AzureIngressProhibitedTargetNamespaceLister interface {
	// List lists all AzureIngressProhibitedTargets in the indexer for a given namespace.
	List(selector labels.Selector) (ret []*v1.AzureIngressProhibitedTarget, err error)
	// Get retrieves the AzureIngressProhibitedTarget from the indexer for a given namespace and name.
	Get(name string) (*v1.AzureIngressProhibitedTarget, error)
	AzureIngressProhibitedTargetNamespaceListerExpansion
}

// azureIngressProhibitedTargetNamespaceLister implements the AzureIngressProhibitedTargetNamespaceLister
// interface.
type azureIngressProhibitedTargetNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all AzureIngressProhibitedTargets in the indexer for a given namespace.
func (s azureIngressProhibitedTargetNamespaceLister) List(selector labels.Selector) (ret []*v1.AzureIngressProhibitedTarget, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.AzureIngressProhibitedTarget))
	})
	return ret, err
}

// Get retrieves the AzureIngressProhibitedTarget from the indexer for a given namespace and name.
func (s azureIngressProhibitedTargetNamespaceLister) Get(name string) (*v1.AzureIngressProhibitedTarget, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("azureingressprohibitedtarget"), name)
	}
	return obj.(*v1.AzureIngressProhibitedTarget), nil
}
