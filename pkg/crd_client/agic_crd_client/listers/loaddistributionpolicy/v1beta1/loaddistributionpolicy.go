/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1beta1

import (
	v1beta1 "github.com/Azure/application-gateway-kubernetes-ingress/pkg/apis/loaddistributionpolicy/v1beta1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// LoadDistributionPolicyLister helps list LoadDistributionPolicies.
// All objects returned here must be treated as read-only.
type LoadDistributionPolicyLister interface {
	// List lists all LoadDistributionPolicies in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.LoadDistributionPolicy, err error)
	// LoadDistributionPolicies returns an object that can list and get LoadDistributionPolicies.
	LoadDistributionPolicies(namespace string) LoadDistributionPolicyNamespaceLister
	LoadDistributionPolicyListerExpansion
}

// loadDistributionPolicyLister implements the LoadDistributionPolicyLister interface.
type loadDistributionPolicyLister struct {
	indexer cache.Indexer
}

// NewLoadDistributionPolicyLister returns a new LoadDistributionPolicyLister.
func NewLoadDistributionPolicyLister(indexer cache.Indexer) LoadDistributionPolicyLister {
	return &loadDistributionPolicyLister{indexer: indexer}
}

// List lists all LoadDistributionPolicies in the indexer.
func (s *loadDistributionPolicyLister) List(selector labels.Selector) (ret []*v1beta1.LoadDistributionPolicy, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.LoadDistributionPolicy))
	})
	return ret, err
}

// LoadDistributionPolicies returns an object that can list and get LoadDistributionPolicies.
func (s *loadDistributionPolicyLister) LoadDistributionPolicies(namespace string) LoadDistributionPolicyNamespaceLister {
	return loadDistributionPolicyNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// LoadDistributionPolicyNamespaceLister helps list and get LoadDistributionPolicies.
// All objects returned here must be treated as read-only.
type LoadDistributionPolicyNamespaceLister interface {
	// List lists all LoadDistributionPolicies in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1beta1.LoadDistributionPolicy, err error)
	// Get retrieves the LoadDistributionPolicy from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1beta1.LoadDistributionPolicy, error)
	LoadDistributionPolicyNamespaceListerExpansion
}

// loadDistributionPolicyNamespaceLister implements the LoadDistributionPolicyNamespaceLister
// interface.
type loadDistributionPolicyNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all LoadDistributionPolicies in the indexer for a given namespace.
func (s loadDistributionPolicyNamespaceLister) List(selector labels.Selector) (ret []*v1beta1.LoadDistributionPolicy, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1beta1.LoadDistributionPolicy))
	})
	return ret, err
}

// Get retrieves the LoadDistributionPolicy from the indexer for a given namespace and name.
func (s loadDistributionPolicyNamespaceLister) Get(name string) (*v1beta1.LoadDistributionPolicy, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1beta1.Resource("loaddistributionpolicy"), name)
	}
	return obj.(*v1beta1.LoadDistributionPolicy), nil
}
