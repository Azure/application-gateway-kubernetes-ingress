// Code generated by protoc-gen-go. DO NOT EDIT.
// source: google/ads/googleads/v1/resources/shared_criterion.proto

package resources // import "google.golang.org/genproto/googleapis/ads/googleads/v1/resources"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import wrappers "github.com/golang/protobuf/ptypes/wrappers"
import common "google.golang.org/genproto/googleapis/ads/googleads/v1/common"
import enums "google.golang.org/genproto/googleapis/ads/googleads/v1/enums"
import _ "google.golang.org/genproto/googleapis/api/annotations"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// A criterion belonging to a shared set.
type SharedCriterion struct {
	// The resource name of the shared criterion.
	// Shared set resource names have the form:
	//
	// `customers/{customer_id}/sharedCriteria/{shared_set_id}~{criterion_id}`
	ResourceName string `protobuf:"bytes,1,opt,name=resource_name,json=resourceName,proto3" json:"resource_name,omitempty"`
	// The shared set to which the shared criterion belongs.
	SharedSet *wrappers.StringValue `protobuf:"bytes,2,opt,name=shared_set,json=sharedSet,proto3" json:"shared_set,omitempty"`
	// The ID of the criterion.
	//
	// This field is ignored for mutates.
	CriterionId *wrappers.Int64Value `protobuf:"bytes,26,opt,name=criterion_id,json=criterionId,proto3" json:"criterion_id,omitempty"`
	// The type of the criterion.
	Type enums.CriterionTypeEnum_CriterionType `protobuf:"varint,4,opt,name=type,proto3,enum=google.ads.googleads.v1.enums.CriterionTypeEnum_CriterionType" json:"type,omitempty"`
	// The criterion.
	//
	// Exactly one must be set.
	//
	// Types that are valid to be assigned to Criterion:
	//	*SharedCriterion_Keyword
	//	*SharedCriterion_YoutubeVideo
	//	*SharedCriterion_YoutubeChannel
	//	*SharedCriterion_Placement
	//	*SharedCriterion_MobileAppCategory
	Criterion            isSharedCriterion_Criterion `protobuf_oneof:"criterion"`
	XXX_NoUnkeyedLiteral struct{}                    `json:"-"`
	XXX_unrecognized     []byte                      `json:"-"`
	XXX_sizecache        int32                       `json:"-"`
}

func (m *SharedCriterion) Reset()         { *m = SharedCriterion{} }
func (m *SharedCriterion) String() string { return proto.CompactTextString(m) }
func (*SharedCriterion) ProtoMessage()    {}
func (*SharedCriterion) Descriptor() ([]byte, []int) {
	return fileDescriptor_shared_criterion_ead1292271ca6193, []int{0}
}
func (m *SharedCriterion) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SharedCriterion.Unmarshal(m, b)
}
func (m *SharedCriterion) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SharedCriterion.Marshal(b, m, deterministic)
}
func (dst *SharedCriterion) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SharedCriterion.Merge(dst, src)
}
func (m *SharedCriterion) XXX_Size() int {
	return xxx_messageInfo_SharedCriterion.Size(m)
}
func (m *SharedCriterion) XXX_DiscardUnknown() {
	xxx_messageInfo_SharedCriterion.DiscardUnknown(m)
}

var xxx_messageInfo_SharedCriterion proto.InternalMessageInfo

func (m *SharedCriterion) GetResourceName() string {
	if m != nil {
		return m.ResourceName
	}
	return ""
}

func (m *SharedCriterion) GetSharedSet() *wrappers.StringValue {
	if m != nil {
		return m.SharedSet
	}
	return nil
}

func (m *SharedCriterion) GetCriterionId() *wrappers.Int64Value {
	if m != nil {
		return m.CriterionId
	}
	return nil
}

func (m *SharedCriterion) GetType() enums.CriterionTypeEnum_CriterionType {
	if m != nil {
		return m.Type
	}
	return enums.CriterionTypeEnum_UNSPECIFIED
}

type isSharedCriterion_Criterion interface {
	isSharedCriterion_Criterion()
}

type SharedCriterion_Keyword struct {
	Keyword *common.KeywordInfo `protobuf:"bytes,3,opt,name=keyword,proto3,oneof"`
}

type SharedCriterion_YoutubeVideo struct {
	YoutubeVideo *common.YouTubeVideoInfo `protobuf:"bytes,5,opt,name=youtube_video,json=youtubeVideo,proto3,oneof"`
}

type SharedCriterion_YoutubeChannel struct {
	YoutubeChannel *common.YouTubeChannelInfo `protobuf:"bytes,6,opt,name=youtube_channel,json=youtubeChannel,proto3,oneof"`
}

type SharedCriterion_Placement struct {
	Placement *common.PlacementInfo `protobuf:"bytes,7,opt,name=placement,proto3,oneof"`
}

type SharedCriterion_MobileAppCategory struct {
	MobileAppCategory *common.MobileAppCategoryInfo `protobuf:"bytes,8,opt,name=mobile_app_category,json=mobileAppCategory,proto3,oneof"`
}

func (*SharedCriterion_Keyword) isSharedCriterion_Criterion() {}

func (*SharedCriterion_YoutubeVideo) isSharedCriterion_Criterion() {}

func (*SharedCriterion_YoutubeChannel) isSharedCriterion_Criterion() {}

func (*SharedCriterion_Placement) isSharedCriterion_Criterion() {}

func (*SharedCriterion_MobileAppCategory) isSharedCriterion_Criterion() {}

func (m *SharedCriterion) GetCriterion() isSharedCriterion_Criterion {
	if m != nil {
		return m.Criterion
	}
	return nil
}

func (m *SharedCriterion) GetKeyword() *common.KeywordInfo {
	if x, ok := m.GetCriterion().(*SharedCriterion_Keyword); ok {
		return x.Keyword
	}
	return nil
}

func (m *SharedCriterion) GetYoutubeVideo() *common.YouTubeVideoInfo {
	if x, ok := m.GetCriterion().(*SharedCriterion_YoutubeVideo); ok {
		return x.YoutubeVideo
	}
	return nil
}

func (m *SharedCriterion) GetYoutubeChannel() *common.YouTubeChannelInfo {
	if x, ok := m.GetCriterion().(*SharedCriterion_YoutubeChannel); ok {
		return x.YoutubeChannel
	}
	return nil
}

func (m *SharedCriterion) GetPlacement() *common.PlacementInfo {
	if x, ok := m.GetCriterion().(*SharedCriterion_Placement); ok {
		return x.Placement
	}
	return nil
}

func (m *SharedCriterion) GetMobileAppCategory() *common.MobileAppCategoryInfo {
	if x, ok := m.GetCriterion().(*SharedCriterion_MobileAppCategory); ok {
		return x.MobileAppCategory
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SharedCriterion) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SharedCriterion_OneofMarshaler, _SharedCriterion_OneofUnmarshaler, _SharedCriterion_OneofSizer, []interface{}{
		(*SharedCriterion_Keyword)(nil),
		(*SharedCriterion_YoutubeVideo)(nil),
		(*SharedCriterion_YoutubeChannel)(nil),
		(*SharedCriterion_Placement)(nil),
		(*SharedCriterion_MobileAppCategory)(nil),
	}
}

func _SharedCriterion_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SharedCriterion)
	// criterion
	switch x := m.Criterion.(type) {
	case *SharedCriterion_Keyword:
		b.EncodeVarint(3<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Keyword); err != nil {
			return err
		}
	case *SharedCriterion_YoutubeVideo:
		b.EncodeVarint(5<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.YoutubeVideo); err != nil {
			return err
		}
	case *SharedCriterion_YoutubeChannel:
		b.EncodeVarint(6<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.YoutubeChannel); err != nil {
			return err
		}
	case *SharedCriterion_Placement:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Placement); err != nil {
			return err
		}
	case *SharedCriterion_MobileAppCategory:
		b.EncodeVarint(8<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.MobileAppCategory); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SharedCriterion.Criterion has unexpected type %T", x)
	}
	return nil
}

func _SharedCriterion_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SharedCriterion)
	switch tag {
	case 3: // criterion.keyword
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(common.KeywordInfo)
		err := b.DecodeMessage(msg)
		m.Criterion = &SharedCriterion_Keyword{msg}
		return true, err
	case 5: // criterion.youtube_video
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(common.YouTubeVideoInfo)
		err := b.DecodeMessage(msg)
		m.Criterion = &SharedCriterion_YoutubeVideo{msg}
		return true, err
	case 6: // criterion.youtube_channel
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(common.YouTubeChannelInfo)
		err := b.DecodeMessage(msg)
		m.Criterion = &SharedCriterion_YoutubeChannel{msg}
		return true, err
	case 7: // criterion.placement
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(common.PlacementInfo)
		err := b.DecodeMessage(msg)
		m.Criterion = &SharedCriterion_Placement{msg}
		return true, err
	case 8: // criterion.mobile_app_category
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(common.MobileAppCategoryInfo)
		err := b.DecodeMessage(msg)
		m.Criterion = &SharedCriterion_MobileAppCategory{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SharedCriterion_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SharedCriterion)
	// criterion
	switch x := m.Criterion.(type) {
	case *SharedCriterion_Keyword:
		s := proto.Size(x.Keyword)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SharedCriterion_YoutubeVideo:
		s := proto.Size(x.YoutubeVideo)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SharedCriterion_YoutubeChannel:
		s := proto.Size(x.YoutubeChannel)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SharedCriterion_Placement:
		s := proto.Size(x.Placement)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case *SharedCriterion_MobileAppCategory:
		s := proto.Size(x.MobileAppCategory)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*SharedCriterion)(nil), "google.ads.googleads.v1.resources.SharedCriterion")
}

func init() {
	proto.RegisterFile("google/ads/googleads/v1/resources/shared_criterion.proto", fileDescriptor_shared_criterion_ead1292271ca6193)
}

var fileDescriptor_shared_criterion_ead1292271ca6193 = []byte{
	// 573 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x94, 0xed, 0x8a, 0xd3, 0x4c,
	0x14, 0xc7, 0x9f, 0x76, 0xdf, 0x9e, 0xce, 0xbe, 0x61, 0xf4, 0x43, 0x58, 0x17, 0xe9, 0x2a, 0x0b,
	0x05, 0xd9, 0x89, 0xad, 0x2f, 0x48, 0x16, 0x16, 0xd2, 0x22, 0xb5, 0xca, 0x4a, 0x49, 0x97, 0x8a,
	0x52, 0x09, 0xd3, 0xe4, 0x6c, 0x36, 0x98, 0xcc, 0x0c, 0x33, 0x93, 0x2e, 0xfd, 0xe8, 0xad, 0xf8,
	0xd1, 0x4b, 0x11, 0xbc, 0x11, 0xaf, 0x42, 0x3a, 0x99, 0x64, 0x71, 0xa5, 0xd6, 0x6f, 0xa7, 0xe7,
	0xfc, 0xff, 0xbf, 0x9e, 0x73, 0x72, 0x12, 0xf4, 0x32, 0x66, 0x2c, 0x4e, 0xc1, 0x21, 0x91, 0x74,
	0x8a, 0x70, 0x11, 0xcd, 0xda, 0x8e, 0x00, 0xc9, 0x72, 0x11, 0x82, 0x74, 0xe4, 0x15, 0x11, 0x10,
	0x05, 0xa1, 0x48, 0x14, 0x88, 0x84, 0x51, 0xcc, 0x05, 0x53, 0xcc, 0x3a, 0x2a, 0xe4, 0x98, 0x44,
	0x12, 0x57, 0x4e, 0x3c, 0x6b, 0xe3, 0xca, 0x79, 0x70, 0xb2, 0x0c, 0x1e, 0xb2, 0x2c, 0x63, 0xd4,
	0x31, 0x48, 0x52, 0x10, 0x0f, 0x3a, 0xcb, 0xe4, 0x40, 0xf3, 0x4c, 0x3a, 0x55, 0x03, 0x81, 0x9a,
	0x73, 0x30, 0x9e, 0x07, 0xc6, 0xa3, 0x7f, 0x4d, 0xf3, 0x4b, 0xe7, 0x5a, 0x10, 0xce, 0x41, 0x48,
	0x53, 0x3f, 0x2c, 0x99, 0x3c, 0x71, 0x08, 0xa5, 0x4c, 0x11, 0x95, 0x30, 0x6a, 0xaa, 0x0f, 0x7f,
	0x6c, 0xa0, 0xfd, 0x91, 0x1e, 0xaf, 0x57, 0xc2, 0xad, 0x47, 0x68, 0xb7, 0x9c, 0x20, 0xa0, 0x24,
	0x03, 0xbb, 0xd6, 0xac, 0xb5, 0x1a, 0xfe, 0x4e, 0x99, 0x7c, 0x47, 0x32, 0xb0, 0x4e, 0x11, 0x32,
	0x6b, 0x91, 0xa0, 0xec, 0x7a, 0xb3, 0xd6, 0xda, 0xee, 0x1c, 0x9a, 0x35, 0xe0, 0xb2, 0x17, 0x3c,
	0x52, 0x22, 0xa1, 0xf1, 0x98, 0xa4, 0x39, 0xf8, 0x8d, 0x42, 0x3f, 0x02, 0x65, 0x9d, 0xa1, 0x9d,
	0x9b, 0x59, 0x92, 0xc8, 0x3e, 0xd0, 0xf6, 0xfb, 0x7f, 0xd8, 0x07, 0x54, 0xbd, 0x78, 0x56, 0xb8,
	0xb7, 0x2b, 0xc3, 0x20, 0xb2, 0x7c, 0xb4, 0xbe, 0xd8, 0x80, 0xbd, 0xde, 0xac, 0xb5, 0xf6, 0x3a,
	0x67, 0x78, 0xd9, 0x83, 0xd0, 0x6b, 0xc3, 0xd5, 0x64, 0x17, 0x73, 0x0e, 0xaf, 0x68, 0x9e, 0xfd,
	0x9e, 0xf1, 0x35, 0xcb, 0xea, 0xa3, 0xad, 0xcf, 0x30, 0xbf, 0x66, 0x22, 0xb2, 0xd7, 0x74, 0x3b,
	0x8f, 0x97, 0x62, 0x8b, 0x87, 0x87, 0xdf, 0x16, 0xf2, 0x01, 0xbd, 0x64, 0xaf, 0xff, 0xf3, 0x4b,
	0xb7, 0xf5, 0x1e, 0xed, 0xce, 0x59, 0xae, 0xf2, 0x29, 0x04, 0xb3, 0x24, 0x02, 0x66, 0x6f, 0x68,
	0xdc, 0x93, 0x55, 0xb8, 0x0f, 0x2c, 0xbf, 0xc8, 0xa7, 0x30, 0x5e, 0x78, 0x0c, 0x73, 0xc7, 0x80,
	0x74, 0xce, 0xfa, 0x84, 0xf6, 0x4b, 0x70, 0x78, 0x45, 0x28, 0x85, 0xd4, 0xde, 0xd4, 0xe8, 0xce,
	0x3f, 0xa2, 0x7b, 0x85, 0xcb, 0xc0, 0xf7, 0x0c, 0xcc, 0x64, 0xad, 0x73, 0xd4, 0xe0, 0x29, 0x09,
	0x21, 0x03, 0xaa, 0xec, 0x2d, 0x0d, 0x3e, 0x59, 0x05, 0x1e, 0x96, 0x06, 0xc3, 0xbc, 0x21, 0x58,
	0x31, 0xba, 0x9b, 0xb1, 0x69, 0x92, 0x42, 0x40, 0x38, 0x0f, 0x42, 0xa2, 0x20, 0x66, 0x62, 0x6e,
	0xff, 0xaf, 0xc1, 0xcf, 0x57, 0x81, 0xcf, 0xb5, 0xd5, 0xe3, 0xbc, 0x67, 0x8c, 0xe6, 0x0f, 0xee,
	0x64, 0xb7, 0x0b, 0xdd, 0x6d, 0xd4, 0xa8, 0x6e, 0xa3, 0xfb, 0xa5, 0x8e, 0x8e, 0x43, 0x96, 0xe1,
	0x95, 0xaf, 0x66, 0xf7, 0xde, 0xad, 0xb3, 0x1f, 0x2e, 0x8e, 0x6e, 0x58, 0xfb, 0xf8, 0xc6, 0x58,
	0x63, 0x96, 0x12, 0x1a, 0x63, 0x26, 0x62, 0x27, 0x06, 0xaa, 0x4f, 0xb2, 0x7c, 0x27, 0x79, 0x22,
	0xff, 0xf2, 0xb9, 0x38, 0xad, 0xa2, 0xaf, 0xf5, 0xb5, 0xbe, 0xe7, 0x7d, 0xab, 0x1f, 0xf5, 0x0b,
	0xa4, 0x17, 0x49, 0x5c, 0x84, 0x8b, 0x68, 0xdc, 0xc6, 0x7e, 0xa9, 0xfc, 0x5e, 0x6a, 0x26, 0x5e,
	0x24, 0x27, 0x95, 0x66, 0x32, 0x6e, 0x4f, 0x2a, 0xcd, 0xcf, 0xfa, 0x71, 0x51, 0x70, 0x5d, 0x2f,
	0x92, 0xae, 0x5b, 0xa9, 0x5c, 0x77, 0xdc, 0x76, 0xdd, 0x4a, 0x37, 0xdd, 0xd4, 0xcd, 0x3e, 0xfd,
	0x15, 0x00, 0x00, 0xff, 0xff, 0xe0, 0xa2, 0x09, 0x47, 0xda, 0x04, 0x00, 0x00,
}
