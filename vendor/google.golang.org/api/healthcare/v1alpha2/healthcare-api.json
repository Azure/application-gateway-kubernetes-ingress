{
  "auth": {
    "oauth2": {
      "scopes": {
        "https://www.googleapis.com/auth/cloud-platform": {
          "description": "View and manage your data across Google Cloud Platform services"
        }
      }
    }
  },
  "basePath": "",
  "baseUrl": "https://healthcare.googleapis.com/",
  "batchPath": "batch",
  "canonicalName": "Cloud Healthcare",
  "description": "",
  "discoveryVersion": "v1",
  "documentationLink": "https://cloud.google.com/healthcare",
  "fullyEncodeReservedExpansion": true,
  "icons": {
    "x16": "http://www.google.com/images/icons/product/search-16.gif",
    "x32": "http://www.google.com/images/icons/product/search-32.gif"
  },
  "id": "healthcare:v1alpha2",
  "kind": "discovery#restDescription",
  "name": "healthcare",
  "ownerDomain": "google.com",
  "ownerName": "Google",
  "parameters": {
    "$.xgafv": {
      "description": "V1 error format.",
      "enum": [
        "1",
        "2"
      ],
      "enumDescriptions": [
        "v1 error format",
        "v2 error format"
      ],
      "location": "query",
      "type": "string"
    },
    "access_token": {
      "description": "OAuth access token.",
      "location": "query",
      "type": "string"
    },
    "alt": {
      "default": "json",
      "description": "Data format for response.",
      "enum": [
        "json",
        "media",
        "proto"
      ],
      "enumDescriptions": [
        "Responses with Content-Type of application/json",
        "Media download with context-dependent Content-Type",
        "Responses with Content-Type of application/x-protobuf"
      ],
      "location": "query",
      "type": "string"
    },
    "callback": {
      "description": "JSONP",
      "location": "query",
      "type": "string"
    },
    "fields": {
      "description": "Selector specifying which fields to include in a partial response.",
      "location": "query",
      "type": "string"
    },
    "key": {
      "description": "API key. Your API key identifies your project and provides you with API access, quota, and reports. Required unless you provide an OAuth 2.0 token.",
      "location": "query",
      "type": "string"
    },
    "oauth_token": {
      "description": "OAuth 2.0 token for the current user.",
      "location": "query",
      "type": "string"
    },
    "prettyPrint": {
      "default": "true",
      "description": "Returns response with indentations and line breaks.",
      "location": "query",
      "type": "boolean"
    },
    "quotaUser": {
      "description": "Available to use for quota purposes for server-side applications. Can be any arbitrary string assigned to a user, but should not exceed 40 characters.",
      "location": "query",
      "type": "string"
    },
    "uploadType": {
      "description": "Legacy upload protocol for media (e.g. \"media\", \"multipart\").",
      "location": "query",
      "type": "string"
    },
    "upload_protocol": {
      "description": "Upload protocol for media (e.g. \"raw\", \"multipart\").",
      "location": "query",
      "type": "string"
    }
  },
  "protocol": "rest",
  "resources": {
    "projects": {
      "resources": {
        "locations": {
          "methods": {
            "get": {
              "description": "Gets information about a location.",
              "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}",
              "httpMethod": "GET",
              "id": "healthcare.projects.locations.get",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "name": {
                  "description": "Resource name for the location.",
                  "location": "path",
                  "pattern": "^projects/[^/]+/locations/[^/]+$",
                  "required": true,
                  "type": "string"
                }
              },
              "path": "v1alpha2/{+name}",
              "response": {
                "$ref": "Location"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            },
            "list": {
              "description": "Lists information about the supported locations for this service.",
              "flatPath": "v1alpha2/projects/{projectsId}/locations",
              "httpMethod": "GET",
              "id": "healthcare.projects.locations.list",
              "parameterOrder": [
                "name"
              ],
              "parameters": {
                "filter": {
                  "description": "The standard list filter.",
                  "location": "query",
                  "type": "string"
                },
                "name": {
                  "description": "The resource that owns the locations collection, if applicable.",
                  "location": "path",
                  "pattern": "^projects/[^/]+$",
                  "required": true,
                  "type": "string"
                },
                "pageSize": {
                  "description": "The standard list page size.",
                  "format": "int32",
                  "location": "query",
                  "type": "integer"
                },
                "pageToken": {
                  "description": "The standard list page token.",
                  "location": "query",
                  "type": "string"
                }
              },
              "path": "v1alpha2/{+name}/locations",
              "response": {
                "$ref": "ListLocationsResponse"
              },
              "scopes": [
                "https://www.googleapis.com/auth/cloud-platform"
              ]
            }
          },
          "resources": {
            "datasets": {
              "methods": {
                "create": {
                  "description": "Creates a new health dataset. Results are returned through the\nOperation interface which returns either an\n`Operation.response` which contains a Dataset or\n`Operation.error`. The metadata\nfield type is OperationMetadata.",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets",
                  "httpMethod": "POST",
                  "id": "healthcare.projects.locations.datasets.create",
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "datasetId": {
                      "description": "The ID of the dataset that is being created.\nThe string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.",
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "description": "The name of the project in which the dataset should be created (e.g.,\n`projects/{project_id}/locations/{location_id}`).",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1alpha2/{+parent}/datasets",
                  "request": {
                    "$ref": "Dataset"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "deidentify": {
                  "description": "Creates a new dataset containing de-identified data from the source\ndataset. The metadata field type\nis OperationMetadata.\nIf the request is successful, the\nresponse field type is\nDeidentifySummary.\nIf errors occur,\ndetails field type is\nDeidentifyErrorDetails.",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:deidentify",
                  "httpMethod": "POST",
                  "id": "healthcare.projects.locations.datasets.deidentify",
                  "parameterOrder": [
                    "sourceDataset"
                  ],
                  "parameters": {
                    "sourceDataset": {
                      "description": "Source dataset resource name. (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1alpha2/{+sourceDataset}:deidentify",
                  "request": {
                    "$ref": "DeidentifyDatasetRequest"
                  },
                  "response": {
                    "$ref": "Operation"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "delete": {
                  "description": "Deletes the specified health dataset and all data contained in the dataset.\nDeleting a dataset does not affect the sources from which the dataset was\nimported (if any).",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}",
                  "httpMethod": "DELETE",
                  "id": "healthcare.projects.locations.datasets.delete",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "The name of the dataset to delete (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1alpha2/{+name}",
                  "response": {
                    "$ref": "Empty"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "get": {
                  "description": "Gets any metadata associated with a dataset.",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}",
                  "httpMethod": "GET",
                  "id": "healthcare.projects.locations.datasets.get",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "The name of the dataset to read (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1alpha2/{+name}",
                  "response": {
                    "$ref": "Dataset"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "getIamPolicy": {
                  "description": "Gets the access control policy for a resource.\nReturns an empty policy if the resource exists and does not have a policy\nset.",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:getIamPolicy",
                  "httpMethod": "GET",
                  "id": "healthcare.projects.locations.datasets.getIamPolicy",
                  "parameterOrder": [
                    "resource"
                  ],
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1alpha2/{+resource}:getIamPolicy",
                  "response": {
                    "$ref": "Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "list": {
                  "description": "Lists the health datasets in the current project.",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets",
                  "httpMethod": "GET",
                  "id": "healthcare.projects.locations.datasets.list",
                  "parameterOrder": [
                    "parent"
                  ],
                  "parameters": {
                    "pageSize": {
                      "description": "The maximum number of items to return. Capped to 100 if not specified.\nMay not be larger than 1000.",
                      "format": "int32",
                      "location": "query",
                      "type": "integer"
                    },
                    "pageToken": {
                      "description": "The next_page_token value returned from a previous List request, if any.",
                      "location": "query",
                      "type": "string"
                    },
                    "parent": {
                      "description": "The name of the project whose datasets should be listed (e.g.,\n`projects/{project_id}/locations/{location_id}`).",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1alpha2/{+parent}/datasets",
                  "response": {
                    "$ref": "ListDatasetsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "patch": {
                  "description": "Updates dataset metadata.",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}",
                  "httpMethod": "PATCH",
                  "id": "healthcare.projects.locations.datasets.patch",
                  "parameterOrder": [
                    "name"
                  ],
                  "parameters": {
                    "name": {
                      "description": "Output only. Resource name of the dataset, of the form\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                      "required": true,
                      "type": "string"
                    },
                    "updateMask": {
                      "description": "The update mask applies to the resource. For the `FieldMask` definition,\nsee\nhttps://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask",
                      "format": "google-fieldmask",
                      "location": "query",
                      "type": "string"
                    }
                  },
                  "path": "v1alpha2/{+name}",
                  "request": {
                    "$ref": "Dataset"
                  },
                  "response": {
                    "$ref": "Dataset"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "setIamPolicy": {
                  "description": "Sets the access control policy on the specified resource. Replaces any\nexisting policy.",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:setIamPolicy",
                  "httpMethod": "POST",
                  "id": "healthcare.projects.locations.datasets.setIamPolicy",
                  "parameterOrder": [
                    "resource"
                  ],
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1alpha2/{+resource}:setIamPolicy",
                  "request": {
                    "$ref": "SetIamPolicyRequest"
                  },
                  "response": {
                    "$ref": "Policy"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                },
                "testIamPermissions": {
                  "description": "Returns permissions that a caller has on the specified resource.\nIf the resource does not exist, this will return an empty set of\npermissions, not a NOT_FOUND error.\n\nNote: This operation is designed to be used for building permission-aware\nUIs and command-line tools, not for authorization checking. This operation\nmay \"fail open\" without warning.",
                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}:testIamPermissions",
                  "httpMethod": "POST",
                  "id": "healthcare.projects.locations.datasets.testIamPermissions",
                  "parameterOrder": [
                    "resource"
                  ],
                  "parameters": {
                    "resource": {
                      "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                      "location": "path",
                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                      "required": true,
                      "type": "string"
                    }
                  },
                  "path": "v1alpha2/{+resource}:testIamPermissions",
                  "request": {
                    "$ref": "TestIamPermissionsRequest"
                  },
                  "response": {
                    "$ref": "TestIamPermissionsResponse"
                  },
                  "scopes": [
                    "https://www.googleapis.com/auth/cloud-platform"
                  ]
                }
              },
              "resources": {
                "annotationStores": {
                  "methods": {
                    "create": {
                      "description": "Creates a new Annotation store within the parent dataset.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores",
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.annotationStores.create",
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "annotationStoreId": {
                          "description": "The ID of the Annotation store that is being created.\nThe string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.",
                          "location": "query",
                          "type": "string"
                        },
                        "parent": {
                          "description": "The name of the dataset this Annotation store belongs to.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+parent}/annotationStores",
                      "request": {
                        "$ref": "AnnotationStore"
                      },
                      "response": {
                        "$ref": "AnnotationStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "delete": {
                      "description": "Deletes the specified Annotation store and removes all annotations that are\ncontained within it.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}",
                      "httpMethod": "DELETE",
                      "id": "healthcare.projects.locations.datasets.annotationStores.delete",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "The resource name of the Annotation store to delete.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/annotationStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}",
                      "response": {
                        "$ref": "Empty"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "get": {
                      "description": "Gets the specified Annotation store or returns NOT_FOUND if it does not\nexist.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}",
                      "httpMethod": "GET",
                      "id": "healthcare.projects.locations.datasets.annotationStores.get",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "The resource name of the Annotation store to get.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/annotationStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}",
                      "response": {
                        "$ref": "AnnotationStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "getIamPolicy": {
                      "description": "Gets the access control policy for a resource. Returns NOT_FOUND error if\nthe resource does not exist. Returns an empty policy if the resource exists\nbut does not have a policy set.\n\nAuthorization requires the Google IAM permission\n`healthcare.AnnotationStores.getIamPolicy` on the specified resource",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:getIamPolicy",
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.annotationStores.getIamPolicy",
                      "parameterOrder": [
                        "resource"
                      ],
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/annotationStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+resource}:getIamPolicy",
                      "request": {
                        "$ref": "GetIamPolicyRequest"
                      },
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "list": {
                      "description": "Lists the Annotation stores in the given dataset for a source store.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores",
                      "httpMethod": "GET",
                      "id": "healthcare.projects.locations.datasets.annotationStores.list",
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "filter": {
                          "description": "Restricts stores returned to those matching a filter. Syntax:\nhttps://cloud.google.com/appengine/docs/standard/python/search/query_strings\nOnly filtering on labels is supported, for example `labels.key=value`.",
                          "location": "query",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "Limit on the number of Annotation stores to return in a single response.\nIf zero the default page size of 100 is used.",
                          "format": "int32",
                          "location": "query",
                          "type": "integer"
                        },
                        "pageToken": {
                          "description": "The next_page_token value returned from the previous List request, if any.",
                          "location": "query",
                          "type": "string"
                        },
                        "parent": {
                          "description": "Name of the dataset.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+parent}/annotationStores",
                      "response": {
                        "$ref": "ListAnnotationStoresResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "patch": {
                      "description": "Updates the specified Annotation store.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}",
                      "httpMethod": "PATCH",
                      "id": "healthcare.projects.locations.datasets.annotationStores.patch",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "Output only. Resource name of the Annotation store, of the form\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/annotationStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        },
                        "updateMask": {
                          "description": "The update mask applies to the resource. For the `FieldMask` definition,\nsee\nhttps://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask",
                          "format": "google-fieldmask",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}",
                      "request": {
                        "$ref": "AnnotationStore"
                      },
                      "response": {
                        "$ref": "AnnotationStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "setIamPolicy": {
                      "description": "POLICIES\nSets the access control policy for a resource. Replaces any existing\npolicy.\n\nAuthorization requires the Google IAM permission\n'healthcare.annotationStores.setIamPolicy' on the specified resource",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:setIamPolicy",
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.annotationStores.setIamPolicy",
                      "parameterOrder": [
                        "resource"
                      ],
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/annotationStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+resource}:setIamPolicy",
                      "request": {
                        "$ref": "SetIamPolicyRequest"
                      },
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "testIamPermissions": {
                      "description": "Returns permissions that a caller has on the specified resource.\nIf the resource does not exist, this will return an empty set of\npermissions, not a NOT_FOUND error.\n\nThere is no permission required to make this API call.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}:testIamPermissions",
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.annotationStores.testIamPermissions",
                      "parameterOrder": [
                        "resource"
                      ],
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/annotationStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+resource}:testIamPermissions",
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      },
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    }
                  },
                  "resources": {
                    "annotations": {
                      "methods": {
                        "create": {
                          "description": "Creates a new Annotation record. It is\nvalid to create Annotation objects for the same source more than once since\na unique ID is assigned to each record by this service.",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}/annotations",
                          "httpMethod": "POST",
                          "id": "healthcare.projects.locations.datasets.annotationStores.annotations.create",
                          "parameterOrder": [
                            "parent"
                          ],
                          "parameters": {
                            "parent": {
                              "description": "The name of the Annotation store this annotation belongs to. For example,\n`projects/my-project/locations/us-central1/datasets/mydataset/annotationStores/myannotationstore`.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/annotationStores/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+parent}/annotations",
                          "request": {
                            "$ref": "Annotation"
                          },
                          "response": {
                            "$ref": "Annotation"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "delete": {
                          "description": "Deletes an Annotation or returns\nNOT_FOUND if it does not exist.",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}/annotations/{annotationsId}",
                          "httpMethod": "DELETE",
                          "id": "healthcare.projects.locations.datasets.annotationStores.annotations.delete",
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "name": {
                              "description": "The resource name of the Annotation to delete.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/annotationStores/[^/]+/annotations/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+name}",
                          "response": {
                            "$ref": "Empty"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "get": {
                          "description": "Gets an Annotation.",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}/annotations/{annotationsId}",
                          "httpMethod": "GET",
                          "id": "healthcare.projects.locations.datasets.annotationStores.annotations.get",
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "name": {
                              "description": "The resource name of the Annotation to retrieve.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/annotationStores/[^/]+/annotations/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+name}",
                          "response": {
                            "$ref": "Annotation"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "list": {
                          "description": "Lists the Annotations in the given\nAnnotation store for a source\nresource.",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}/annotations",
                          "httpMethod": "GET",
                          "id": "healthcare.projects.locations.datasets.annotationStores.annotations.list",
                          "parameterOrder": [
                            "parent"
                          ],
                          "parameters": {
                            "filter": {
                              "description": "Restricts Annotations returned to those matching a filter. Syntax:\nhttps://cloud.google.com/appengine/docs/standard/python/search/query_strings\nFields/functions available for filtering are:\n- source_version",
                              "location": "query",
                              "type": "string"
                            },
                            "pageSize": {
                              "description": "Limit on the number of Annotations to return in a single response.\nIf zero the default page size of 100 is used.",
                              "format": "int32",
                              "location": "query",
                              "type": "integer"
                            },
                            "pageToken": {
                              "description": "The next_page_token value returned from the previous List request, if any.",
                              "location": "query",
                              "type": "string"
                            },
                            "parent": {
                              "description": "Name of the Annotation store to retrieve Annotations from.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/annotationStores/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+parent}/annotations",
                          "response": {
                            "$ref": "ListAnnotationsResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "patch": {
                          "description": "Updates the Annotation.",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/annotationStores/{annotationStoresId}/annotations/{annotationsId}",
                          "httpMethod": "PATCH",
                          "id": "healthcare.projects.locations.datasets.annotationStores.annotations.patch",
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "name": {
                              "description": "Output only. Resource name of the Annotation, of the form\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}/annotations/{annotation_id}`.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/annotationStores/[^/]+/annotations/[^/]+$",
                              "required": true,
                              "type": "string"
                            },
                            "updateMask": {
                              "description": "The update mask applies to the resource. For the `FieldMask` definition,\nsee\nhttps://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask",
                              "format": "google-fieldmask",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+name}",
                          "request": {
                            "$ref": "Annotation"
                          },
                          "response": {
                            "$ref": "Annotation"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        }
                      }
                    }
                  }
                },
                "dicomStores": {
                  "methods": {
                    "create": {
                      "description": "Creates a new DICOM store within the parent dataset.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores",
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.dicomStores.create",
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "dicomStoreId": {
                          "description": "The ID of the DICOM store that is being created.\nAny string value up to 256 characters in length.",
                          "location": "query",
                          "type": "string"
                        },
                        "parent": {
                          "description": "The name of the dataset this DICOM store belongs to.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+parent}/dicomStores",
                      "request": {
                        "$ref": "DicomStore"
                      },
                      "response": {
                        "$ref": "DicomStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "delete": {
                      "description": "Deletes the specified DICOM store and removes all images that are contained\nwithin it.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}",
                      "httpMethod": "DELETE",
                      "id": "healthcare.projects.locations.datasets.dicomStores.delete",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "The resource name of the DICOM store to delete.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}",
                      "response": {
                        "$ref": "Empty"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "export": {
                      "description": "Exports data to the specified destination by copying it from the DICOM\nstore.\nThe metadata field type is\nOperationMetadata.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:export",
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.dicomStores.export",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "The DICOM store resource name from which the data should be exported (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}:export",
                      "request": {
                        "$ref": "ExportDicomDataRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "get": {
                      "description": "Gets the specified DICOM store.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}",
                      "httpMethod": "GET",
                      "id": "healthcare.projects.locations.datasets.dicomStores.get",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "The resource name of the DICOM store to get.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}",
                      "response": {
                        "$ref": "DicomStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "getIamPolicy": {
                      "description": "Gets the access control policy for a resource.\nReturns an empty policy if the resource exists and does not have a policy\nset.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:getIamPolicy",
                      "httpMethod": "GET",
                      "id": "healthcare.projects.locations.datasets.dicomStores.getIamPolicy",
                      "parameterOrder": [
                        "resource"
                      ],
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+resource}:getIamPolicy",
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "import": {
                      "description": "Imports data into the DICOM store by copying it from the specified source.\nFor errors, the Operation will be populated with error details (in the form\nof ImportDicomDataErrorDetails in error.details), which will hold\nfiner-grained error information.\nThe metadata field type is\nOperationMetadata.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:import",
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.dicomStores.import",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "The name of the DICOM store resource into which the data is imported (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}:import",
                      "request": {
                        "$ref": "ImportDicomDataRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "list": {
                      "description": "Lists the DICOM stores in the given dataset.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores",
                      "httpMethod": "GET",
                      "id": "healthcare.projects.locations.datasets.dicomStores.list",
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "filter": {
                          "description": "Restricts stores returned to those matching a filter. Syntax:\nhttps://cloud.google.com/appengine/docs/standard/python/search/query_strings\nOnly filtering on labels is supported, for example `labels.key=value`.",
                          "location": "query",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "Limit on the number of DICOM stores to return in a single response.\nIf zero the default page size of 100 is used.",
                          "format": "int32",
                          "location": "query",
                          "type": "integer"
                        },
                        "pageToken": {
                          "description": "The next_page_token value returned from the previous List request, if any.",
                          "location": "query",
                          "type": "string"
                        },
                        "parent": {
                          "description": "Name of the dataset.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+parent}/dicomStores",
                      "response": {
                        "$ref": "ListDicomStoresResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "patch": {
                      "description": "Updates the specified DICOM store.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}",
                      "httpMethod": "PATCH",
                      "id": "healthcare.projects.locations.datasets.dicomStores.patch",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "Output only. Resource name of the DICOM store, of the form\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        },
                        "updateMask": {
                          "description": "The update mask applies to the resource. For the `FieldMask` definition,\nsee\nhttps://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask",
                          "format": "google-fieldmask",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}",
                      "request": {
                        "$ref": "DicomStore"
                      },
                      "response": {
                        "$ref": "DicomStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "setIamPolicy": {
                      "description": "Sets the access control policy on the specified resource. Replaces any\nexisting policy.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:setIamPolicy",
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.dicomStores.setIamPolicy",
                      "parameterOrder": [
                        "resource"
                      ],
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+resource}:setIamPolicy",
                      "request": {
                        "$ref": "SetIamPolicyRequest"
                      },
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "testIamPermissions": {
                      "description": "Returns permissions that a caller has on the specified resource.\nIf the resource does not exist, this will return an empty set of\npermissions, not a NOT_FOUND error.\n\nNote: This operation is designed to be used for building permission-aware\nUIs and command-line tools, not for authorization checking. This operation\nmay \"fail open\" without warning.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}:testIamPermissions",
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.dicomStores.testIamPermissions",
                      "parameterOrder": [
                        "resource"
                      ],
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+resource}:testIamPermissions",
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      },
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    }
                  },
                  "resources": {
                    "dicomWeb": {
                      "methods": {
                        "instances": {
                          "description": "SearchForInstances returns a list of matching instances. See\nhttp://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.7",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/instances",
                          "httpMethod": "GET",
                          "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.instances",
                          "parameterOrder": [
                            "parent",
                            "dicomWebPath"
                          ],
                          "parameters": {
                            "dicomWebPath": {
                              "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g.,\n`instances`).",
                              "location": "path",
                              "pattern": "^instances$",
                              "required": true,
                              "type": "string"
                            },
                            "parent": {
                              "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "searchForStudies": {
                          "description": "SearchForStudies returns a list of matching studies. See\nhttp://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.7",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies",
                          "httpMethod": "GET",
                          "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.searchForStudies",
                          "parameterOrder": [
                            "parent",
                            "dicomWebPath"
                          ],
                          "parameters": {
                            "dicomWebPath": {
                              "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g.,\n`studies`).",
                              "location": "path",
                              "pattern": "^studies$",
                              "required": true,
                              "type": "string"
                            },
                            "parent": {
                              "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "series": {
                          "description": "SearchForSeries returns a list of matching series. See\nhttp://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.7",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/series",
                          "httpMethod": "GET",
                          "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.series",
                          "parameterOrder": [
                            "parent",
                            "dicomWebPath"
                          ],
                          "parameters": {
                            "dicomWebPath": {
                              "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g.,\n`series`).",
                              "location": "path",
                              "pattern": "^series$",
                              "required": true,
                              "type": "string"
                            },
                            "parent": {
                              "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "studies": {
                          "description": "StoreInstances stores DICOM instances associated with study instance unique\nidentifiers (SUID). See\nhttp://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.6.1.",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies",
                          "httpMethod": "POST",
                          "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies",
                          "parameterOrder": [
                            "parent",
                            "dicomWebPath"
                          ],
                          "parameters": {
                            "dicomWebPath": {
                              "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g., `studies/{study_id}`).",
                              "location": "path",
                              "pattern": "^studies$",
                              "required": true,
                              "type": "string"
                            },
                            "parent": {
                              "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                          "request": {
                            "$ref": "HttpBody"
                          },
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        }
                      },
                      "resources": {
                        "studies": {
                          "methods": {
                            "delete": {
                              "description": "DeleteStudy deletes all instances within the given study. Delete requests\nare equivalent to the GET requests specified in the WADO-RS standard.",
                              "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}",
                              "httpMethod": "DELETE",
                              "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.delete",
                              "parameterOrder": [
                                "parent",
                                "dicomWebPath"
                              ],
                              "parameters": {
                                "dicomWebPath": {
                                  "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g., `studies/{study_id}`).",
                                  "location": "path",
                                  "pattern": "^studies/[^/]+$",
                                  "required": true,
                                  "type": "string"
                                },
                                "parent": {
                                  "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                                  "location": "path",
                                  "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                  "required": true,
                                  "type": "string"
                                }
                              },
                              "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                              "response": {
                                "$ref": "Empty"
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ]
                            },
                            "instances": {
                              "description": "SearchForInstances returns a list of matching instances. See\nhttp://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.7",
                              "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/instances",
                              "httpMethod": "GET",
                              "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.instances",
                              "parameterOrder": [
                                "parent",
                                "dicomWebPath"
                              ],
                              "parameters": {
                                "dicomWebPath": {
                                  "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g.,\n`instances`).",
                                  "location": "path",
                                  "pattern": "^studies/[^/]+/instances$",
                                  "required": true,
                                  "type": "string"
                                },
                                "parent": {
                                  "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                                  "location": "path",
                                  "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                  "required": true,
                                  "type": "string"
                                }
                              },
                              "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                              "response": {
                                "$ref": "HttpBody"
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ]
                            },
                            "metadata": {
                              "description": "RetrieveStudyMetadata returns instance associated with the given study\npresented as metadata with the bulk data removed. See\nhttp://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.6.",
                              "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/metadata",
                              "httpMethod": "GET",
                              "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.metadata",
                              "parameterOrder": [
                                "parent",
                                "dicomWebPath"
                              ],
                              "parameters": {
                                "dicomWebPath": {
                                  "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g., `studies/{study_id}/metadata`.",
                                  "location": "path",
                                  "pattern": "^studies/[^/]+/metadata$",
                                  "required": true,
                                  "type": "string"
                                },
                                "parent": {
                                  "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                                  "location": "path",
                                  "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                  "required": true,
                                  "type": "string"
                                }
                              },
                              "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                              "response": {
                                "$ref": "HttpBody"
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ]
                            },
                            "retrieveStudy": {
                              "description": "RetrieveStudy returns all instances within the given study. See\nhttp://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.1.",
                              "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}",
                              "httpMethod": "GET",
                              "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.retrieveStudy",
                              "parameterOrder": [
                                "parent",
                                "dicomWebPath"
                              ],
                              "parameters": {
                                "dicomWebPath": {
                                  "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g., `studies/{study_id}`).",
                                  "location": "path",
                                  "pattern": "^studies/[^/]+$",
                                  "required": true,
                                  "type": "string"
                                },
                                "parent": {
                                  "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                                  "location": "path",
                                  "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                  "required": true,
                                  "type": "string"
                                }
                              },
                              "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                              "response": {
                                "$ref": "HttpBody"
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ]
                            },
                            "series": {
                              "description": "SearchForSeries returns a list of matching series. See\nhttp://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.7",
                              "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series",
                              "httpMethod": "GET",
                              "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series",
                              "parameterOrder": [
                                "parent",
                                "dicomWebPath"
                              ],
                              "parameters": {
                                "dicomWebPath": {
                                  "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g.,\n`series`).",
                                  "location": "path",
                                  "pattern": "^studies/[^/]+/series$",
                                  "required": true,
                                  "type": "string"
                                },
                                "parent": {
                                  "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                                  "location": "path",
                                  "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                  "required": true,
                                  "type": "string"
                                }
                              },
                              "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                              "response": {
                                "$ref": "HttpBody"
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ]
                            },
                            "storeInstances": {
                              "description": "StoreInstances stores DICOM instances associated with study instance unique\nidentifiers (SUID). See\nhttp://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.6.1.",
                              "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}",
                              "httpMethod": "POST",
                              "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.storeInstances",
                              "parameterOrder": [
                                "parent",
                                "dicomWebPath"
                              ],
                              "parameters": {
                                "dicomWebPath": {
                                  "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g., `studies/{study_id}`).",
                                  "location": "path",
                                  "pattern": "^studies/[^/]+$",
                                  "required": true,
                                  "type": "string"
                                },
                                "parent": {
                                  "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                                  "location": "path",
                                  "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                  "required": true,
                                  "type": "string"
                                }
                              },
                              "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                              "request": {
                                "$ref": "HttpBody"
                              },
                              "response": {
                                "$ref": "HttpBody"
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ]
                            }
                          },
                          "resources": {
                            "series": {
                              "methods": {
                                "delete": {
                                  "description": "DeleteSeries deletes all instances within the given study and series.\nDelete requests are equivalent to the GET requests specified in the WADO-RS\nstandard.",
                                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}",
                                  "httpMethod": "DELETE",
                                  "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.delete",
                                  "parameterOrder": [
                                    "parent",
                                    "dicomWebPath"
                                  ],
                                  "parameters": {
                                    "dicomWebPath": {
                                      "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}`).",
                                      "location": "path",
                                      "pattern": "^studies/[^/]+/series/[^/]+$",
                                      "required": true,
                                      "type": "string"
                                    },
                                    "parent": {
                                      "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                                      "location": "path",
                                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                      "required": true,
                                      "type": "string"
                                    }
                                  },
                                  "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                                  "response": {
                                    "$ref": "Empty"
                                  },
                                  "scopes": [
                                    "https://www.googleapis.com/auth/cloud-platform"
                                  ]
                                },
                                "instances": {
                                  "description": "SearchForInstances returns a list of matching instances. See\nhttp://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.7",
                                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances",
                                  "httpMethod": "GET",
                                  "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.instances",
                                  "parameterOrder": [
                                    "parent",
                                    "dicomWebPath"
                                  ],
                                  "parameters": {
                                    "dicomWebPath": {
                                      "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g.,\n`instances`).",
                                      "location": "path",
                                      "pattern": "^studies/[^/]+/series/[^/]+/instances$",
                                      "required": true,
                                      "type": "string"
                                    },
                                    "parent": {
                                      "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                                      "location": "path",
                                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                      "required": true,
                                      "type": "string"
                                    }
                                  },
                                  "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                                  "response": {
                                    "$ref": "HttpBody"
                                  },
                                  "scopes": [
                                    "https://www.googleapis.com/auth/cloud-platform"
                                  ]
                                },
                                "metadata": {
                                  "description": "RetrieveSeriesMetadata returns instance associated with the given study and\nseries, presented as metadata with the bulk data removed. See\nhttp://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.6.",
                                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/metadata",
                                  "httpMethod": "GET",
                                  "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.metadata",
                                  "parameterOrder": [
                                    "parent",
                                    "dicomWebPath"
                                  ],
                                  "parameters": {
                                    "dicomWebPath": {
                                      "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}/metadata`.",
                                      "location": "path",
                                      "pattern": "^studies/[^/]+/series/[^/]+/metadata$",
                                      "required": true,
                                      "type": "string"
                                    },
                                    "parent": {
                                      "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                                      "location": "path",
                                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                      "required": true,
                                      "type": "string"
                                    }
                                  },
                                  "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                                  "response": {
                                    "$ref": "HttpBody"
                                  },
                                  "scopes": [
                                    "https://www.googleapis.com/auth/cloud-platform"
                                  ]
                                },
                                "retrieveSeries": {
                                  "description": "RetrieveSeries returns all instances within the given study and series. See\nhttp://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.2.",
                                  "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}",
                                  "httpMethod": "GET",
                                  "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.retrieveSeries",
                                  "parameterOrder": [
                                    "parent",
                                    "dicomWebPath"
                                  ],
                                  "parameters": {
                                    "dicomWebPath": {
                                      "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g., `studies/{study_id}/series/{series_id}`).",
                                      "location": "path",
                                      "pattern": "^studies/[^/]+/series/[^/]+$",
                                      "required": true,
                                      "type": "string"
                                    },
                                    "parent": {
                                      "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                                      "location": "path",
                                      "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                      "required": true,
                                      "type": "string"
                                    }
                                  },
                                  "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                                  "response": {
                                    "$ref": "HttpBody"
                                  },
                                  "scopes": [
                                    "https://www.googleapis.com/auth/cloud-platform"
                                  ]
                                }
                              },
                              "resources": {
                                "instances": {
                                  "methods": {
                                    "delete": {
                                      "description": "DeleteInstance deletes an instance associated with the given study, series,\nand SOP Instance UID. Delete requests are equivalent to the GET requests\nspecified in the WADO-RS standard.",
                                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}",
                                      "httpMethod": "DELETE",
                                      "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.instances.delete",
                                      "parameterOrder": [
                                        "parent",
                                        "dicomWebPath"
                                      ],
                                      "parameters": {
                                        "dicomWebPath": {
                                          "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g.,\n`studies/{study_id}/series/{series_id}/instances/{instance_id}`).",
                                          "location": "path",
                                          "pattern": "^studies/[^/]+/series/[^/]+/instances/[^/]+$",
                                          "required": true,
                                          "type": "string"
                                        },
                                        "parent": {
                                          "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                                          "location": "path",
                                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                          "required": true,
                                          "type": "string"
                                        }
                                      },
                                      "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                                      "response": {
                                        "$ref": "Empty"
                                      },
                                      "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform"
                                      ]
                                    },
                                    "metadata": {
                                      "description": "RetrieveInstanceMetadata returns instance associated with the given study,\nseries, and SOP Instance UID presented as metadata with the bulk data\nremoved. See\nhttp://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.6.",
                                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/metadata",
                                      "httpMethod": "GET",
                                      "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.instances.metadata",
                                      "parameterOrder": [
                                        "parent",
                                        "dicomWebPath"
                                      ],
                                      "parameters": {
                                        "dicomWebPath": {
                                          "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g.,\n`studies/{study_id}/series/{series_id}/instances/{instance_id}/metadata`).",
                                          "location": "path",
                                          "pattern": "^studies/[^/]+/series/[^/]+/instances/[^/]+/metadata$",
                                          "required": true,
                                          "type": "string"
                                        },
                                        "parent": {
                                          "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                                          "location": "path",
                                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                          "required": true,
                                          "type": "string"
                                        }
                                      },
                                      "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                                      "response": {
                                        "$ref": "HttpBody"
                                      },
                                      "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform"
                                      ]
                                    },
                                    "rendered": {
                                      "description": "RetrieveRenderedInstance returns instance associated with the given study,\nseries, and SOP Instance UID in an acceptable Rendered Media Type. See\nhttp://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.8.",
                                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/rendered",
                                      "httpMethod": "GET",
                                      "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.instances.rendered",
                                      "parameterOrder": [
                                        "parent",
                                        "dicomWebPath"
                                      ],
                                      "parameters": {
                                        "dicomWebPath": {
                                          "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g.,\n`studies/{study_id}/series/{series_id}/instance/{instance_id}/rendered`).",
                                          "location": "path",
                                          "pattern": "^studies/[^/]+/series/[^/]+/instances/[^/]+/rendered$",
                                          "required": true,
                                          "type": "string"
                                        },
                                        "parent": {
                                          "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                                          "location": "path",
                                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                          "required": true,
                                          "type": "string"
                                        }
                                      },
                                      "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                                      "response": {
                                        "$ref": "HttpBody"
                                      },
                                      "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform"
                                      ]
                                    },
                                    "retrieveInstance": {
                                      "description": "RetrieveInstance returns instance associated with the given study, series,\nand SOP Instance UID. See\nhttp://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.3.",
                                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}",
                                      "httpMethod": "GET",
                                      "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.instances.retrieveInstance",
                                      "parameterOrder": [
                                        "parent",
                                        "dicomWebPath"
                                      ],
                                      "parameters": {
                                        "dicomWebPath": {
                                          "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g.,\n`studies/{study_id}/series/{series_id}/instance/{instance_id}`).",
                                          "location": "path",
                                          "pattern": "^studies/[^/]+/series/[^/]+/instances/[^/]+$",
                                          "required": true,
                                          "type": "string"
                                        },
                                        "parent": {
                                          "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                                          "location": "path",
                                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                          "required": true,
                                          "type": "string"
                                        }
                                      },
                                      "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                                      "response": {
                                        "$ref": "HttpBody"
                                      },
                                      "scopes": [
                                        "https://www.googleapis.com/auth/cloud-platform"
                                      ]
                                    }
                                  },
                                  "resources": {
                                    "frames": {
                                      "methods": {
                                        "rendered": {
                                          "description": "RetrieveRenderedFrames returns instances associated with the given study,\nseries, SOP Instance UID and frame numbers in an acceptable Rendered Media\nType. See\nhttp://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.8.",
                                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/frames/{framesId}/rendered",
                                          "httpMethod": "GET",
                                          "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.instances.frames.rendered",
                                          "parameterOrder": [
                                            "parent",
                                            "dicomWebPath"
                                          ],
                                          "parameters": {
                                            "dicomWebPath": {
                                              "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g.,\n`studies/{study_id}/series/{series_id}/instance/{instance_id}/frames/{frame_list}/rendered`).",
                                              "location": "path",
                                              "pattern": "^studies/[^/]+/series/[^/]+/instances/[^/]+/frames/[^/]+/rendered$",
                                              "required": true,
                                              "type": "string"
                                            },
                                            "parent": {
                                              "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                                              "location": "path",
                                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                              "required": true,
                                              "type": "string"
                                            }
                                          },
                                          "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                                          "response": {
                                            "$ref": "HttpBody"
                                          },
                                          "scopes": [
                                            "https://www.googleapis.com/auth/cloud-platform"
                                          ]
                                        },
                                        "retrieveFrames": {
                                          "description": "RetrieveFrames returns instances associated with the given study, series,\nSOP Instance UID and frame numbers. See\nhttp://dicom.nema.org/medical/dicom/current/output/html/part18.html#sect_6.5.4.",
                                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/dicomStores/{dicomStoresId}/dicomWeb/studies/{studiesId}/series/{seriesId}/instances/{instancesId}/frames/{framesId}",
                                          "httpMethod": "GET",
                                          "id": "healthcare.projects.locations.datasets.dicomStores.dicomWeb.studies.series.instances.frames.retrieveFrames",
                                          "parameterOrder": [
                                            "parent",
                                            "dicomWebPath"
                                          ],
                                          "parameters": {
                                            "dicomWebPath": {
                                              "description": "The path of the DICOMweb request, as specified in the STOW-RS, WADO-RS, or\nQIDO-RS standard (e.g.,\n`studies/{study_id}/series/{series_id}/instance/{instance_id}/frames/{frame_list}`).",
                                              "location": "path",
                                              "pattern": "^studies/[^/]+/series/[^/]+/instances/[^/]+/frames/[^/]+$",
                                              "required": true,
                                              "type": "string"
                                            },
                                            "parent": {
                                              "description": "The name of the DICOM store that is being accessed (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`).",
                                              "location": "path",
                                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/dicomStores/[^/]+$",
                                              "required": true,
                                              "type": "string"
                                            }
                                          },
                                          "path": "v1alpha2/{+parent}/dicomWeb/{+dicomWebPath}",
                                          "response": {
                                            "$ref": "HttpBody"
                                          },
                                          "scopes": [
                                            "https://www.googleapis.com/auth/cloud-platform"
                                          ]
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                },
                "fhirStores": {
                  "methods": {
                    "create": {
                      "description": "Creates a new FHIR store within the parent dataset.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores",
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.fhirStores.create",
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "fhirStoreId": {
                          "description": "The ID of the FHIR store that is being created.\nThe string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.",
                          "location": "query",
                          "type": "string"
                        },
                        "parent": {
                          "description": "The name of the dataset this FHIR store belongs to.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+parent}/fhirStores",
                      "request": {
                        "$ref": "FhirStore"
                      },
                      "response": {
                        "$ref": "FhirStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "delete": {
                      "description": "Deletes the FHIR store and removes all resources that are contained within\nit.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}",
                      "httpMethod": "DELETE",
                      "id": "healthcare.projects.locations.datasets.fhirStores.delete",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "The resource name of the FHIR store to delete.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}",
                      "response": {
                        "$ref": "Empty"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "export": {
                      "description": "Export resources from the FHIR store to the specified destination.\nFatal errors will be populated in the\nerror field.\nOtherwise a detailed response will be returned as of type\nExportResourcesResponse contained in the\nresponse field when the operation\nfinishes.\nThe metadata field type is\nOperationMetadata.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:export",
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.fhirStores.export",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "The name of the FHIR store to export resource from. The name should be in\nthe format of\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}:export",
                      "request": {
                        "$ref": "ExportResourcesRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "fhir": {
                      "description": "Executes all the requests in the given Bundle.  Conforms to\nhttp://hl7.org/fhir/http.html#transaction except that only the transaction\nupdate is supported.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir",
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.fhirStores.fhir",
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "parent": {
                          "description": "Name of the FHIR store in which this bundle will be executed.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+parent}/fhir",
                      "request": {
                        "$ref": "HttpBody"
                      },
                      "response": {
                        "$ref": "HttpBody"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "get": {
                      "description": "Gets the specified FHIR store.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}",
                      "httpMethod": "GET",
                      "id": "healthcare.projects.locations.datasets.fhirStores.get",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "The resource name of the FHIR store to get.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}",
                      "response": {
                        "$ref": "FhirStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "getIamPolicy": {
                      "description": "Gets the access control policy for a FHIR store or security label within a\nFHIR store. Returns NOT_FOUND error if the resource does not exist. Returns\nan empty policy if the resource exists but does not have a policy set.\n\nAuthorization requires the Google IAM permission\n'healthcare.fhirStores.getIamPolicy' for a FHIR store or\n'healthcare.securityLabels.getIamPolicy' for a security label",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:getIamPolicy",
                      "httpMethod": "GET",
                      "id": "healthcare.projects.locations.datasets.fhirStores.getIamPolicy",
                      "parameterOrder": [
                        "resource"
                      ],
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+resource}:getIamPolicy",
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "getMetadata": {
                      "description": "Gets the capabilities statement for the store.\n",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/metadata",
                      "httpMethod": "GET",
                      "id": "healthcare.projects.locations.datasets.fhirStores.getMetadata",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "Name of the FHIR store to retrieve the capabilities for.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}/metadata",
                      "response": {
                        "$ref": "HttpBody"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "import": {
                      "description": "Import resources to the FHIR store by loading data from the specified\nsources.\nFatal errors will be populated in the\nerror field.\nOtherwise a detailed response will be returned as of type\nImportResourcesResponse contained in the\nresponse field when the operation\nfinishes.\nThe metadata field type is\nOperationMetadata.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:import",
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.fhirStores.import",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "The name of the FHIR store to import FHIR resources to. The name should be\nin the format of\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}:import",
                      "request": {
                        "$ref": "ImportResourcesRequest"
                      },
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "list": {
                      "description": "Lists the FHIR stores in the given dataset.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores",
                      "httpMethod": "GET",
                      "id": "healthcare.projects.locations.datasets.fhirStores.list",
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "filter": {
                          "description": "Restricts stores returned to those matching a filter. Syntax:\nhttps://cloud.google.com/appengine/docs/standard/python/search/query_strings\nOnly filtering on labels is supported, for example `labels.key=value`.",
                          "location": "query",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "Limit on the number of FHIR stores to return in a single response.  If zero\nthe default page size of 100 is used.",
                          "format": "int32",
                          "location": "query",
                          "type": "integer"
                        },
                        "pageToken": {
                          "description": "The next_page_token value returned from the previous List request, if any.",
                          "location": "query",
                          "type": "string"
                        },
                        "parent": {
                          "description": "Name of the dataset.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+parent}/fhirStores",
                      "response": {
                        "$ref": "ListFhirStoresResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "patch": {
                      "description": "Updates the FHIR store.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}",
                      "httpMethod": "PATCH",
                      "id": "healthcare.projects.locations.datasets.fhirStores.patch",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "Output only. Resource name of the FHIR store, of the form\n`projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        },
                        "updateMask": {
                          "description": "The update mask applies to the resource. For the `FieldMask` definition,\nsee\nhttps://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask",
                          "format": "google-fieldmask",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}",
                      "request": {
                        "$ref": "FhirStore"
                      },
                      "response": {
                        "$ref": "FhirStore"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "setIamPolicy": {
                      "description": "Sets the access control policy for a FHIR store or security label within a\nFHIR store. Replaces any existing policy.\n\nAuthorization requires the Google IAM permission\n'healthcare.fhirStores.setIamPolicy' for a FHIR store or\n'healthcare.securityLabels.setIamPolicy' for a security label",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:setIamPolicy",
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.fhirStores.setIamPolicy",
                      "parameterOrder": [
                        "resource"
                      ],
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+resource}:setIamPolicy",
                      "request": {
                        "$ref": "SetIamPolicyRequest"
                      },
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "testIamPermissions": {
                      "description": "Returns permissions that a caller has on the specified resource.  If the\nresource does not exist, this will return an empty set of permissions, not\na NOT_FOUND error.\n\nThere is no permission required to make this API call.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}:testIamPermissions",
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.fhirStores.testIamPermissions",
                      "parameterOrder": [
                        "resource"
                      ],
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/.+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+resource}:testIamPermissions",
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      },
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    }
                  },
                  "resources": {
                    "fhir": {
                      "methods": {
                        "_search": {
                          "description": "Searches resources in the given FHIR store.",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/_search",
                          "httpMethod": "POST",
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir._search",
                          "parameterOrder": [
                            "parent"
                          ],
                          "parameters": {
                            "parent": {
                              "description": "Name of the FHIR store to retrieve resources from.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+parent}/fhir/_search",
                          "request": {
                            "$ref": "SearchResourcesRequest"
                          },
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "conditionalDeleteResource": {
                          "description": "Deletes FHIR resources matching a search query.\nNote: unless resource versioning is disabled by setting the\ndisable_resource_versioning flag\non the FHIR store, the deleted resources will be moved to a history\nrepository that can still be retrieved through GetResourceVersion and\nrelated methods, unless they are removed by the DeleteResourceVersions\nmethod.",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}",
                          "httpMethod": "DELETE",
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.conditionalDeleteResource",
                          "parameterOrder": [
                            "parent",
                            "type"
                          ],
                          "parameters": {
                            "parent": {
                              "description": "The name of the FHIR store this resource belongs to.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                              "required": true,
                              "type": "string"
                            },
                            "type": {
                              "description": "The type of the resource to update.",
                              "location": "path",
                              "pattern": "^[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+parent}/fhir/{+type}",
                          "response": {
                            "$ref": "Empty"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "conditionalPatchResource": {
                          "description": "Updates parts of a resource if the resource exists based on the\nsearch criteria specified via query parameters.",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}",
                          "httpMethod": "PATCH",
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.conditionalPatchResource",
                          "parameterOrder": [
                            "parent",
                            "type"
                          ],
                          "parameters": {
                            "parent": {
                              "description": "The name of the FHIR store this resource belongs to.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                              "required": true,
                              "type": "string"
                            },
                            "type": {
                              "description": "The type of the resource to update.",
                              "location": "path",
                              "pattern": "^[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+parent}/fhir/{+type}",
                          "request": {
                            "$ref": "HttpBody"
                          },
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "conditionalUpdateResource": {
                          "description": "Updates the entire resource if the resource exists based on the\nsearch criteria specified via query parameters.\n",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}",
                          "httpMethod": "PUT",
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.conditionalUpdateResource",
                          "parameterOrder": [
                            "parent",
                            "type"
                          ],
                          "parameters": {
                            "parent": {
                              "description": "The name of the FHIR store this resource belongs to.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                              "required": true,
                              "type": "string"
                            },
                            "type": {
                              "description": "The type of the resource to update.",
                              "location": "path",
                              "pattern": "^[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+parent}/fhir/{+type}",
                          "request": {
                            "$ref": "HttpBody"
                          },
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "createResource": {
                          "description": "Creates a FHIR resource.\n",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}",
                          "httpMethod": "POST",
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.createResource",
                          "parameterOrder": [
                            "parent",
                            "type"
                          ],
                          "parameters": {
                            "parent": {
                              "description": "The name of the FHIR store this resource belongs to.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                              "required": true,
                              "type": "string"
                            },
                            "type": {
                              "description": "The type of the resource to create.",
                              "location": "path",
                              "pattern": "^[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+parent}/fhir/{+type}",
                          "request": {
                            "$ref": "HttpBody"
                          },
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "delete": {
                          "description": "Deletes a FHIR resource.\nNote: unless resource versioning is disabled by setting the\ndisable_resource_versioning flag\non the FHIR store, the deleted resources will be moved to a history\nrepository that can still be retrieved through GetResourceVersion and\nrelated methods, unless they are removed by the DeleteResourceVersions\nmethod.",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}",
                          "httpMethod": "DELETE",
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.delete",
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "name": {
                              "description": "The name of the resource to delete.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+/fhir/[^/]+/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+name}",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "delete$purge": {
                          "description": "Deletes all the historical versions of a resource (excluding current\nversion) from the FHIR store. To remove all versions of a resource, first\ndelete the current version and call this API.",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}/$purge",
                          "httpMethod": "DELETE",
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.delete$purge",
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "name": {
                              "description": "The name of the resource to purge.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+/fhir/[^/]+/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+name}/$purge",
                          "response": {
                            "$ref": "Empty"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "get": {
                          "description": "Gets a FHIR resource.\n",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}",
                          "httpMethod": "GET",
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.get",
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "name": {
                              "description": "The name of the resource to retrieve.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+/fhir/[^/]+/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+name}",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "getMetadata": {
                          "description": "Gets the capabilities statement for the store.\n",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/metadata",
                          "httpMethod": "GET",
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.getMetadata",
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "name": {
                              "description": "Name of the FHIR store to retrieve the capabilities for.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+name}/fhir/metadata",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "patch": {
                          "description": "Updates part of an existing resource.\n",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}",
                          "httpMethod": "PATCH",
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.patch",
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "name": {
                              "description": "The name of the resource to update.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+/fhir/[^/]+/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+name}",
                          "request": {
                            "$ref": "HttpBody"
                          },
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "searchResources": {
                          "description": "Searches resources in the given FHIR store.",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}",
                          "httpMethod": "GET",
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.searchResources",
                          "parameterOrder": [
                            "parent",
                            "resourceType"
                          ],
                          "parameters": {
                            "parent": {
                              "description": "Name of the FHIR store to retrieve resources from.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+$",
                              "required": true,
                              "type": "string"
                            },
                            "resourceType": {
                              "description": "The type of the resource to search.",
                              "location": "path",
                              "pattern": "^.+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+parent}/fhir/{+resourceType}",
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "update": {
                          "description": "Updates the entire resource or creates a new resource with a client\nspecified ID if the resource does not exist and the FHIR store has\nenable_update_create set.\n",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}",
                          "httpMethod": "PUT",
                          "id": "healthcare.projects.locations.datasets.fhirStores.fhir.update",
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "name": {
                              "description": "The name of the resource to update.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+/fhir/[^/]+/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+name}",
                          "request": {
                            "$ref": "HttpBody"
                          },
                          "response": {
                            "$ref": "HttpBody"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        }
                      },
                      "resources": {
                        "Patient": {
                          "methods": {
                            "get$everything": {
                              "description": "Gets all the resources in the patient compartment.\n",
                              "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/Patient/{PatientId}/$everything",
                              "httpMethod": "GET",
                              "id": "healthcare.projects.locations.datasets.fhirStores.fhir.Patient.get$everything",
                              "parameterOrder": [
                                "name"
                              ],
                              "parameters": {
                                "end": {
                                  "description": "The response includes records prior to the end date. If no end date is\nprovided, all records subsequent to the start date are in scope.",
                                  "location": "query",
                                  "type": "string"
                                },
                                "name": {
                                  "description": "Name of the patient for which the information is required.",
                                  "location": "path",
                                  "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+/fhir/Patient/[^/]+$",
                                  "required": true,
                                  "type": "string"
                                },
                                "start": {
                                  "description": "The response includes records subsequent to the start date. If no start\ndate is provided, all records prior to the end date are in scope.",
                                  "location": "query",
                                  "type": "string"
                                }
                              },
                              "path": "v1alpha2/{+name}/$everything",
                              "response": {
                                "$ref": "HttpBody"
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ]
                            }
                          }
                        },
                        "_history": {
                          "methods": {
                            "get": {
                              "description": "Gets a version (current or historical) of FHIR resource by version id.\n",
                              "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}/_history/{_historyId}",
                              "httpMethod": "GET",
                              "id": "healthcare.projects.locations.datasets.fhirStores.fhir._history.get",
                              "parameterOrder": [
                                "name"
                              ],
                              "parameters": {
                                "name": {
                                  "description": "The name of the resource version to retrieve.",
                                  "location": "path",
                                  "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+/fhir/[^/]+/[^/]+/_history/[^/]+$",
                                  "required": true,
                                  "type": "string"
                                }
                              },
                              "path": "v1alpha2/{+name}",
                              "response": {
                                "$ref": "HttpBody"
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ]
                            },
                            "list": {
                              "description": "Lists all the versions of a resource (including the current version and\ndeleted versions) from the FHIR store.\n",
                              "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/fhir/{fhirId}/{fhirId1}/_history",
                              "httpMethod": "GET",
                              "id": "healthcare.projects.locations.datasets.fhirStores.fhir._history.list",
                              "parameterOrder": [
                                "name"
                              ],
                              "parameters": {
                                "name": {
                                  "description": "The name of the resource to retrieve.",
                                  "location": "path",
                                  "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+/fhir/[^/]+/[^/]+$",
                                  "required": true,
                                  "type": "string"
                                }
                              },
                              "path": "v1alpha2/{+name}/_history",
                              "response": {
                                "$ref": "HttpBody"
                              },
                              "scopes": [
                                "https://www.googleapis.com/auth/cloud-platform"
                              ]
                            }
                          }
                        }
                      }
                    },
                    "securityLabels": {
                      "methods": {
                        "getIamPolicy": {
                          "description": "Gets the access control policy for a FHIR store or security label within a\nFHIR store. Returns NOT_FOUND error if the resource does not exist. Returns\nan empty policy if the resource exists but does not have a policy set.\n\nAuthorization requires the Google IAM permission\n'healthcare.fhirStores.getIamPolicy' for a FHIR store or\n'healthcare.securityLabels.getIamPolicy' for a security label",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/securityLabels/{securityLabelsId}:getIamPolicy",
                          "httpMethod": "GET",
                          "id": "healthcare.projects.locations.datasets.fhirStores.securityLabels.getIamPolicy",
                          "parameterOrder": [
                            "resource"
                          ],
                          "parameters": {
                            "resource": {
                              "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+/securityLabels/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+resource}:getIamPolicy",
                          "response": {
                            "$ref": "Policy"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "setIamPolicy": {
                          "description": "Sets the access control policy for a FHIR store or security label within a\nFHIR store. Replaces any existing policy.\n\nAuthorization requires the Google IAM permission\n'healthcare.fhirStores.setIamPolicy' for a FHIR store or\n'healthcare.securityLabels.setIamPolicy' for a security label",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/fhirStores/{fhirStoresId}/securityLabels/{securityLabelsId}:setIamPolicy",
                          "httpMethod": "POST",
                          "id": "healthcare.projects.locations.datasets.fhirStores.securityLabels.setIamPolicy",
                          "parameterOrder": [
                            "resource"
                          ],
                          "parameters": {
                            "resource": {
                              "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/fhirStores/[^/]+/securityLabels/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+resource}:setIamPolicy",
                          "request": {
                            "$ref": "SetIamPolicyRequest"
                          },
                          "response": {
                            "$ref": "Policy"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        }
                      }
                    }
                  }
                },
                "hl7V2Stores": {
                  "methods": {
                    "create": {
                      "description": "Creates a new HL7v2 store within the parent dataset.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores",
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.create",
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "hl7V2StoreId": {
                          "description": "The ID of the HL7v2 store that is being created.\nThe string must match the following regex: `[\\p{L}\\p{N}_\\-\\.]{1,256}`.",
                          "location": "query",
                          "type": "string"
                        },
                        "parent": {
                          "description": "The name of the dataset this HL7v2 store belongs to.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+parent}/hl7V2Stores",
                      "request": {
                        "$ref": "Hl7V2Store"
                      },
                      "response": {
                        "$ref": "Hl7V2Store"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "delete": {
                      "description": "Deletes the specified HL7v2 store and removes all messages that are\ncontained within it.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}",
                      "httpMethod": "DELETE",
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.delete",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "The resource name of the HL7v2 store to delete.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}",
                      "response": {
                        "$ref": "Empty"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "get": {
                      "description": "Gets the specified HL7v2 store.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}",
                      "httpMethod": "GET",
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.get",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "The resource name of the HL7v2 store to get.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}",
                      "response": {
                        "$ref": "Hl7V2Store"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "getIamPolicy": {
                      "description": "Gets the access control policy for a resource.\nReturns an empty policy if the resource exists and does not have a policy\nset.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:getIamPolicy",
                      "httpMethod": "GET",
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.getIamPolicy",
                      "parameterOrder": [
                        "resource"
                      ],
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being requested.\nSee the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+resource}:getIamPolicy",
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "list": {
                      "description": "Lists the HL7v2 stores in the given dataset.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores",
                      "httpMethod": "GET",
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.list",
                      "parameterOrder": [
                        "parent"
                      ],
                      "parameters": {
                        "filter": {
                          "description": "Restricts stores returned to those matching a filter. Syntax:\nhttps://cloud.google.com/appengine/docs/standard/python/search/query_strings\nOnly filtering on labels is supported, for example `labels.key=value`.",
                          "location": "query",
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "Limit on the number of HL7v2 stores to return in a single response.\nIf zero the default page size of 100 is used.",
                          "format": "int32",
                          "location": "query",
                          "type": "integer"
                        },
                        "pageToken": {
                          "description": "The next_page_token value returned from the previous List request, if any.",
                          "location": "query",
                          "type": "string"
                        },
                        "parent": {
                          "description": "Name of the dataset.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+parent}/hl7V2Stores",
                      "response": {
                        "$ref": "ListHl7V2StoresResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "patch": {
                      "description": "Updates the HL7v2 store.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}",
                      "httpMethod": "PATCH",
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.patch",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "Output only. Resource name of the HL7v2 store, of the form\n`projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+$",
                          "required": true,
                          "type": "string"
                        },
                        "updateMask": {
                          "description": "The update mask applies to the resource. For the `FieldMask` definition,\nsee\nhttps://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask",
                          "format": "google-fieldmask",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}",
                      "request": {
                        "$ref": "Hl7V2Store"
                      },
                      "response": {
                        "$ref": "Hl7V2Store"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "setIamPolicy": {
                      "description": "Sets the access control policy on the specified resource. Replaces any\nexisting policy.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:setIamPolicy",
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.setIamPolicy",
                      "parameterOrder": [
                        "resource"
                      ],
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy is being specified.\nSee the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+resource}:setIamPolicy",
                      "request": {
                        "$ref": "SetIamPolicyRequest"
                      },
                      "response": {
                        "$ref": "Policy"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "testIamPermissions": {
                      "description": "Returns permissions that a caller has on the specified resource.\nIf the resource does not exist, this will return an empty set of\npermissions, not a NOT_FOUND error.\n\nNote: This operation is designed to be used for building permission-aware\nUIs and command-line tools, not for authorization checking. This operation\nmay \"fail open\" without warning.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}:testIamPermissions",
                      "httpMethod": "POST",
                      "id": "healthcare.projects.locations.datasets.hl7V2Stores.testIamPermissions",
                      "parameterOrder": [
                        "resource"
                      ],
                      "parameters": {
                        "resource": {
                          "description": "REQUIRED: The resource for which the policy detail is being requested.\nSee the operation documentation for the appropriate value for this field.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+resource}:testIamPermissions",
                      "request": {
                        "$ref": "TestIamPermissionsRequest"
                      },
                      "response": {
                        "$ref": "TestIamPermissionsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    }
                  },
                  "resources": {
                    "messages": {
                      "methods": {
                        "create": {
                          "description": "Creates a message and sends a notification to the Cloud Pub/Sub topic. If\nconfigured, the MLLP adapter listens to messages created by this method and\nsends those back to the hospital. A successful response indicates the\nmessage has been persisted to storage and a Cloud Pub/Sub notification has\nbeen sent. Sending to the hospital by the MLLP adapter happens\nasynchronously.",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages",
                          "httpMethod": "POST",
                          "id": "healthcare.projects.locations.datasets.hl7V2Stores.messages.create",
                          "parameterOrder": [
                            "parent"
                          ],
                          "parameters": {
                            "parent": {
                              "description": "The name of the dataset this message belongs to.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+parent}/messages",
                          "request": {
                            "$ref": "CreateMessageRequest"
                          },
                          "response": {
                            "$ref": "Message"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "delete": {
                          "description": "Deletes an HL7v2 message.",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages/{messagesId}",
                          "httpMethod": "DELETE",
                          "id": "healthcare.projects.locations.datasets.hl7V2Stores.messages.delete",
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "name": {
                              "description": "The resource name of the HL7v2 message to delete.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+/messages/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+name}",
                          "response": {
                            "$ref": "Empty"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "get": {
                          "description": "Gets an HL7v2 message.",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages/{messagesId}",
                          "httpMethod": "GET",
                          "id": "healthcare.projects.locations.datasets.hl7V2Stores.messages.get",
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "name": {
                              "description": "The resource name of the HL7v2 message to retrieve.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+/messages/[^/]+$",
                              "required": true,
                              "type": "string"
                            },
                            "view": {
                              "description": "Specifies which parts of the Message resource should be returned\nin the response.",
                              "enum": [
                                "MESSAGE_VIEW_UNSPECIFIED",
                                "RAW_ONLY",
                                "PARSED_ONLY",
                                "FULL"
                              ],
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+name}",
                          "response": {
                            "$ref": "Message"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "ingest": {
                          "description": "Ingests a new HL7v2 message from the hospital and sends a notification to\nthe Cloud Pub/Sub topic. Return is an HL7v2 ACK message if the message was\nsuccessfully stored. Otherwise an error is returned.  If an identical\nHL7v2 message is created twice only one resource is created on the server\nand no error is reported.",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages:ingest",
                          "httpMethod": "POST",
                          "id": "healthcare.projects.locations.datasets.hl7V2Stores.messages.ingest",
                          "parameterOrder": [
                            "parent"
                          ],
                          "parameters": {
                            "parent": {
                              "description": "The name of the HL7v2 store this message belongs to.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+parent}/messages:ingest",
                          "request": {
                            "$ref": "IngestMessageRequest"
                          },
                          "response": {
                            "$ref": "IngestMessageResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "list": {
                          "description": "Lists all the messages in the given HL7v2 store with support for filtering.",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages",
                          "httpMethod": "GET",
                          "id": "healthcare.projects.locations.datasets.hl7V2Stores.messages.list",
                          "parameterOrder": [
                            "parent"
                          ],
                          "parameters": {
                            "filter": {
                              "description": "Restricts messages returned to those matching a filter. Syntax:\nhttps://cloud.google.com/appengine/docs/standard/python/search/query_strings\nFields/functions available for filtering are:\n- message_type, from the MSH-9 segment, e.g. 'NOT message_type = \"ADT\"'\n- send_date or sendDate, the YYYY-MM-DD date the message was sent in the\n  dataset's time_zone, from the MSH-7 segment; e.g.\n  'send_date \u003c \"2017-01-02\"'\n- send_time, the timestamp of when the message was sent, using the RFC3339\n  time format for comparisons, from the MSH-7 segment; e.g. 'send_time \u003c\n  \"2017-01-02T00:00:00-05:00\"'\n- send_facility, the hospital/trust that the message came from, from the\n  MSH-4 segment, e.g. 'send_facility = \"RAL\"'\n- HL7RegExp(expr), which does regular expression matching of expr against\n  the HL7 message payload using re2 (http://code.google.com/p/re2/)\n  syntax; e.g. 'HL7RegExp(\"^.*\\|.*\\|CERNER\")'\n- PatientId(value, type), which matches if the message lists a patient\n  having an ID of the given value and type in the PID-2, PID-3, or PID-4\n  segments; e.g. 'PatientId(\"123456\", \"MRN\")'\n- HasLabel(x), a boolean returning true if the message has a label with\n  key x (having any value) set using the labels map in Message; e.g.\n  'HasLabel(\"priority\")'\n- Label(x), a string value of the label with key x as set using the labels\n  map in Message, e.g. 'Label(\"priority\") = \"high\"'\nNegation on the patient ID function and the label function are not\nsupported, e.g. invalid queries: 'NOT PatientId(\"123456\", \"MRN\")',\n'NOT HasLabel(\"tag1\")', 'NOT Label(\"tag2\") = \"val2\"'.\nConjunction of multiple patient ID functions is not supported, e.g. an\ninvalid query: 'PatientId(\"123456\", \"MRN\") AND PatientId(\"456789\", \"MRN\")'.\nConjunction of multiple label functions is also not supported, e.g. an\ninvalid query: 'HasLabel(\"tag1\") AND Label(\"tag2\") = \"val2\"'.\nConjunction of one patient ID function, one label function and other fields\nis supported, e.g. a valid query:\n'PatientId(\"123456\", \"MRN\") AND HasLabel(\"tag1\") AND message_type = \"ADT\"'.",
                              "location": "query",
                              "type": "string"
                            },
                            "orderBy": {
                              "description": "Orders messages returned by the specified order_by clause.\nSyntax: https://cloud.google.com/apis/design/design_patterns#sorting_order\nFields available for ordering are:\n- send_time",
                              "location": "query",
                              "type": "string"
                            },
                            "pageSize": {
                              "description": "Limit on the number of messages to return in a single response.\nIf zero the default page size of 100 is used.",
                              "format": "int32",
                              "location": "query",
                              "type": "integer"
                            },
                            "pageToken": {
                              "description": "The next_page_token value returned from the previous List request, if any.",
                              "location": "query",
                              "type": "string"
                            },
                            "parent": {
                              "description": "Name of the HL7v2 store to retrieve messages from.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+$",
                              "required": true,
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+parent}/messages",
                          "response": {
                            "$ref": "ListMessagesResponse"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        },
                        "patch": {
                          "description": "Update the message.",
                          "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/hl7V2Stores/{hl7V2StoresId}/messages/{messagesId}",
                          "httpMethod": "PATCH",
                          "id": "healthcare.projects.locations.datasets.hl7V2Stores.messages.patch",
                          "parameterOrder": [
                            "name"
                          ],
                          "parameters": {
                            "name": {
                              "description": "Resource name of the Message, of the form\n`projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`.\nAssigned by the server.",
                              "location": "path",
                              "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/hl7V2Stores/[^/]+/messages/[^/]+$",
                              "required": true,
                              "type": "string"
                            },
                            "updateMask": {
                              "description": "The update mask applies to the resource. For the `FieldMask` definition,\nsee\nhttps://developers.google.com/protocol-buffers/docs/reference/google.protobuf#fieldmask\nOnly the `labels` field is allowed to be updated.\nThe labels in the request will be merged with the existing set of labels.\nExisting labels with the same keys will be updated.",
                              "format": "google-fieldmask",
                              "location": "query",
                              "type": "string"
                            }
                          },
                          "path": "v1alpha2/{+name}",
                          "request": {
                            "$ref": "Message"
                          },
                          "response": {
                            "$ref": "Message"
                          },
                          "scopes": [
                            "https://www.googleapis.com/auth/cloud-platform"
                          ]
                        }
                      }
                    }
                  }
                },
                "operations": {
                  "methods": {
                    "get": {
                      "description": "Gets the latest state of a long-running operation.  Clients can use this\nmethod to poll the operation result at intervals as recommended by the API\nservice.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations/{operationsId}",
                      "httpMethod": "GET",
                      "id": "healthcare.projects.locations.datasets.operations.get",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "name": {
                          "description": "The name of the operation resource.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+/operations/[^/]+$",
                          "required": true,
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}",
                      "response": {
                        "$ref": "Operation"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    },
                    "list": {
                      "description": "Lists operations that match the specified filter in the request. If the\nserver doesn't support this method, it returns `UNIMPLEMENTED`.\n\nNOTE: the `name` binding allows API services to override the binding\nto use different resource name schemes, such as `users/*/operations`. To\noverride the binding, API services can add a binding such as\n`\"/v1/{name=users/*}/operations\"` to their service configuration.\nFor backwards compatibility, the default name includes the operations\ncollection id, however overriding users must ensure the name binding\nis the parent resource, without the operations collection id.",
                      "flatPath": "v1alpha2/projects/{projectsId}/locations/{locationsId}/datasets/{datasetsId}/operations",
                      "httpMethod": "GET",
                      "id": "healthcare.projects.locations.datasets.operations.list",
                      "parameterOrder": [
                        "name"
                      ],
                      "parameters": {
                        "filter": {
                          "description": "The standard list filter.",
                          "location": "query",
                          "type": "string"
                        },
                        "name": {
                          "description": "The name of the operation's parent resource.",
                          "location": "path",
                          "pattern": "^projects/[^/]+/locations/[^/]+/datasets/[^/]+$",
                          "required": true,
                          "type": "string"
                        },
                        "pageSize": {
                          "description": "The standard list page size.",
                          "format": "int32",
                          "location": "query",
                          "type": "integer"
                        },
                        "pageToken": {
                          "description": "The standard list page token.",
                          "location": "query",
                          "type": "string"
                        }
                      },
                      "path": "v1alpha2/{+name}/operations",
                      "response": {
                        "$ref": "ListOperationsResponse"
                      },
                      "scopes": [
                        "https://www.googleapis.com/auth/cloud-platform"
                      ]
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  },
  "revision": "20190223",
  "rootUrl": "https://healthcare.googleapis.com/",
  "schemas": {
    "Annotation": {
      "description": "An annotation record.",
      "id": "Annotation",
      "properties": {
        "annotationSource": {
          "$ref": "AnnotationSource",
          "description": "Details of the source."
        },
        "imageAnnotation": {
          "$ref": "ImageAnnotation",
          "description": "Annnotations for images, e.g., bounding polygons."
        },
        "name": {
          "description": "Output only. Resource name of the Annotation, of the form\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}/annotations/{annotation_id}`.",
          "type": "string"
        },
        "resourceAnnotation": {
          "$ref": "ResourceAnnotation",
          "description": "Annotations for resource, e.g., classification tags."
        },
        "textAnnotation": {
          "$ref": "SensitiveTextAnnotation",
          "description": "Annotations for sentitive texts, e.g., range of such texts."
        }
      },
      "type": "object"
    },
    "AnnotationSource": {
      "description": "AnnotationSource holds the source information of the annotation.",
      "id": "AnnotationSource",
      "properties": {
        "cloudHealthcareSource": {
          "$ref": "CloudHealthcareSource",
          "description": "Cloud Healthcare API resource."
        }
      },
      "type": "object"
    },
    "AnnotationStore": {
      "description": "An Annotation store that can store annotation resources such as\nlabels and tags for text, image and audio.",
      "id": "AnnotationStore",
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "User-supplied key-value pairs used to organize Annotation stores.\n\nLabel keys must be between 1 and 63 characters long, have a UTF-8 encoding\nof maximum 128 bytes, and must conform to the\nfollowing PCRE regular expression:\n\\p{Ll}\\p{Lo}{0,62}\n\nLabel values are optional, must be between 1 and 63 characters long, have\na UTF-8 encoding of maximum 128 bytes, and must conform to the\nfollowing PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}\n\nNo more than 64 labels can be associated with a given store.",
          "type": "object"
        },
        "name": {
          "description": "Output only. Resource name of the Annotation store, of the form\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/annotationStores/{annotation_store_id}`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AuditConfig": {
      "description": "Specifies the audit configuration for a service.\nThe configuration determines which permission types are logged, and what\nidentities, if any, are exempted from logging.\nAn AuditConfig must have one or more AuditLogConfigs.\n\nIf there are AuditConfigs for both `allServices` and a specific service,\nthe union of the two AuditConfigs is used for that service: the log_types\nspecified in each AuditConfig are enabled, and the exempted_members in each\nAuditLogConfig are exempted.\n\nExample Policy with multiple AuditConfigs:\n\n    {\n      \"audit_configs\": [\n        {\n          \"service\": \"allServices\"\n          \"audit_log_configs\": [\n            {\n              \"log_type\": \"DATA_READ\",\n              \"exempted_members\": [\n                \"user:foo@gmail.com\"\n              ]\n            },\n            {\n              \"log_type\": \"DATA_WRITE\",\n            },\n            {\n              \"log_type\": \"ADMIN_READ\",\n            }\n          ]\n        },\n        {\n          \"service\": \"fooservice.googleapis.com\"\n          \"audit_log_configs\": [\n            {\n              \"log_type\": \"DATA_READ\",\n            },\n            {\n              \"log_type\": \"DATA_WRITE\",\n              \"exempted_members\": [\n                \"user:bar@gmail.com\"\n              ]\n            }\n          ]\n        }\n      ]\n    }\n\nFor fooservice, this policy enables DATA_READ, DATA_WRITE and ADMIN_READ\nlogging. It also exempts foo@gmail.com from DATA_READ logging, and\nbar@gmail.com from DATA_WRITE logging.",
      "id": "AuditConfig",
      "properties": {
        "auditLogConfigs": {
          "description": "The configuration for logging of each type of permission.",
          "items": {
            "$ref": "AuditLogConfig"
          },
          "type": "array"
        },
        "service": {
          "description": "Specifies a service that will be enabled for audit logging.\nFor example, `storage.googleapis.com`, `cloudsql.googleapis.com`.\n`allServices` is a special value that covers all services.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "AuditLogConfig": {
      "description": "Provides the configuration for logging a type of permissions.\nExample:\n\n    {\n      \"audit_log_configs\": [\n        {\n          \"log_type\": \"DATA_READ\",\n          \"exempted_members\": [\n            \"user:foo@gmail.com\"\n          ]\n        },\n        {\n          \"log_type\": \"DATA_WRITE\",\n        }\n      ]\n    }\n\nThis enables 'DATA_READ' and 'DATA_WRITE' logging, while exempting\nfoo@gmail.com from DATA_READ logging.",
      "id": "AuditLogConfig",
      "properties": {
        "exemptedMembers": {
          "description": "Specifies the identities that do not cause logging for this type of\npermission.\nFollows the same format of Binding.members.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "logType": {
          "description": "The log type that this config enables.",
          "enum": [
            "LOG_TYPE_UNSPECIFIED",
            "ADMIN_READ",
            "DATA_WRITE",
            "DATA_READ"
          ],
          "enumDescriptions": [
            "Default case. Should never be this.",
            "Admin reads. Example: CloudIAM getIamPolicy",
            "Data writes. Example: CloudSQL Users create",
            "Data reads. Example: CloudSQL Users list"
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "Binding": {
      "description": "Associates `members` with a `role`.",
      "id": "Binding",
      "properties": {
        "condition": {
          "$ref": "Expr",
          "description": "Unimplemented. The condition that is associated with this binding.\nNOTE: an unsatisfied condition will not allow user access via current\nbinding. Different bindings, including their conditions, are examined\nindependently."
        },
        "members": {
          "description": "Specifies the identities requesting access for a Cloud Platform resource.\n`members` can have the following values:\n\n* `allUsers`: A special identifier that represents anyone who is\n   on the internet; with or without a Google account.\n\n* `allAuthenticatedUsers`: A special identifier that represents anyone\n   who is authenticated with a Google account or a service account.\n\n* `user:{emailid}`: An email address that represents a specific Google\n   account. For example, `alice@gmail.com` .\n\n\n* `serviceAccount:{emailid}`: An email address that represents a service\n   account. For example, `my-other-app@appspot.gserviceaccount.com`.\n\n* `group:{emailid}`: An email address that represents a Google group.\n   For example, `admins@example.com`.\n\n\n* `domain:{domain}`: The G Suite domain (primary) that represents all the\n   users of that domain. For example, `google.com` or `example.com`.\n\n",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "role": {
          "description": "Role that is assigned to `members`.\nFor example, `roles/viewer`, `roles/editor`, or `roles/owner`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "BoundingPoly": {
      "description": "A bounding polygon for the detected image annotation.",
      "id": "BoundingPoly",
      "properties": {
        "label": {
          "type": "string"
        },
        "vertices": {
          "items": {
            "$ref": "Vertex"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "CloudHealthcareSource": {
      "description": "Cloud Healthcare API resource.",
      "id": "CloudHealthcareSource",
      "properties": {
        "name": {
          "description": "Full path of a Cloud Healthcare API resource.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "CreateMessageRequest": {
      "description": "Creates a new message.",
      "id": "CreateMessageRequest",
      "properties": {
        "message": {
          "$ref": "Message",
          "description": "HL7v2 message."
        }
      },
      "type": "object"
    },
    "Dataset": {
      "description": "A message representing a health dataset.\n\nA health dataset represents a collection of healthcare data pertaining to one\nor more patients. This may include multiple modalities of healthcare data,\nsuch as electronic medical records or medical imaging data.",
      "id": "Dataset",
      "properties": {
        "name": {
          "description": "Output only. Resource name of the dataset, of the form\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`.",
          "type": "string"
        },
        "timeZone": {
          "description": "The default timezone used by this dataset. Must be a either a valid IANA\ntime zone name such as \"America/New_York\" or empty, which defaults to UTC.\nThis is used for parsing times in resources (e.g., HL7 messages) where no\nexplicit timezone is specified.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "DeidentifyConfig": {
      "description": "Configures de-id options specific to different types of content.\nEach submessage customizes the handling of an\nhttps://tools.ietf.org/html/rfc6838 media type or subtype. Configs are\napplied in a nested manner at runtime.",
      "id": "DeidentifyConfig",
      "properties": {
        "dicom": {
          "$ref": "DicomConfig",
          "description": "Configures de-id of application/DICOM content."
        },
        "fhir": {
          "$ref": "FhirConfig",
          "description": "Configures de-id of application/FHIR content."
        },
        "image": {
          "$ref": "ImageConfig",
          "description": "Configures de-identification of image pixels wherever they are found in the\nsource_dataset."
        }
      },
      "type": "object"
    },
    "DeidentifyDatasetRequest": {
      "description": "Redacts identifying information from the specified dataset.",
      "id": "DeidentifyDatasetRequest",
      "properties": {
        "config": {
          "$ref": "DeidentifyConfig",
          "description": "Deidentify configuration"
        },
        "destinationDataset": {
          "description": "The name of the dataset resource to which the redacted data should be\nwritten (e.g.,\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}`).\nThe new dataset must not exist, or the request will fail.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Detail": {
      "description": "Contains multiple sensitive information findings for each resource slice.",
      "id": "Detail",
      "properties": {
        "findings": {
          "items": {
            "$ref": "Finding"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "DicomConfig": {
      "description": "Specifies the parameters needed for de-identification of DICOM stores.",
      "id": "DicomConfig",
      "properties": {
        "keepList": {
          "$ref": "TagFilterList",
          "description": "List of tags to keep. Remove all other tags."
        }
      },
      "type": "object"
    },
    "DicomStore": {
      "description": "Represents a DICOM store.",
      "id": "DicomStore",
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "User-supplied key-value pairs used to organize DICOM stores.\n\nLabel keys must be between 1 and 63 characters long, have a UTF-8 encoding\nof maximum 128 bytes, and must conform to the\nfollowing PCRE regular expression:\n\\p{Ll}\\p{Lo}{0,62}\n\nLabel values are optional, must be between 1 and 63 characters long, have\na UTF-8 encoding of maximum 128 bytes, and must conform to the\nfollowing PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}\n\nNo more than 64 labels can be associated with a given store.",
          "type": "object"
        },
        "name": {
          "description": "Output only. Resource name of the DICOM store, of the form\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`.",
          "type": "string"
        },
        "notificationConfig": {
          "$ref": "NotificationConfig",
          "description": "Notification destination for new DICOM instances.\nSupplied by the client."
        }
      },
      "type": "object"
    },
    "Empty": {
      "description": "A generic empty message that you can re-use to avoid defining duplicated\nempty messages in your APIs. A typical example is to use it as the request\nor the response type of an API method. For instance:\n\n    service Foo {\n      rpc Bar(google.protobuf.Empty) returns (google.protobuf.Empty);\n    }\n\nThe JSON representation for `Empty` is empty JSON object `{}`.",
      "id": "Empty",
      "properties": {},
      "type": "object"
    },
    "ErrorDetail": {
      "description": "Structure to describe the error encountered during batch operation on one\nresource. This is used both for sample errors in operation response, and\nfor format of errors in error reports.",
      "id": "ErrorDetail",
      "properties": {
        "error": {
          "$ref": "Status",
          "description": "The status of the error."
        },
        "resource": {
          "description": "The identifier of the resource.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ExportDicomDataRequest": {
      "description": "Exports data from the specified DICOM store.\nIf a given resource (e.g., a DICOM object with the same SOPInstance UID)\nalready exists in the output, it is overwritten with the version\nin the source dataset.\nExported DICOM data will persist when the DICOM store from which it was\nexported is deleted.",
      "id": "ExportDicomDataRequest",
      "properties": {
        "bigqueryDestination": {
          "$ref": "GoogleCloudHealthcareV1alpha2DicomBigQueryDestination",
          "description": "The BigQuery output destination.\n\nFor now, only exporting to a dataset in the current project is supported\n\nThe BigQuery location requires two IAM roles:\n`roles/bigquery.dataEditor` and `roles/bigquery.jobUser`."
        },
        "gcsDestination": {
          "$ref": "GoogleCloudHealthcareV1alpha2DicomGcsDestination",
          "description": "The Cloud Storage output destination.\n\nThe Cloud Storage location requires the `roles/storage.objectAdmin` Cloud\nIAM role."
        }
      },
      "type": "object"
    },
    "ExportResourcesRequest": {
      "description": "Request to export resources.",
      "id": "ExportResourcesRequest",
      "properties": {
        "bigqueryDestination": {
          "$ref": "GoogleCloudHealthcareV1alpha2FhirBigQueryDestination",
          "description": "The BigQuery output destination.\n\nThe BigQuery location requires two IAM roles:\n`roles/bigquery.dataEditor` and `roles/bigquery.jobUser`.\n\nThe output will be one BigQuery table per resource type.\nThe server implements a data-driven FHIR-to-SQL schema mapping in support\nof analytics workloads with BigQuery. Incompatible changes to the output\nschema may be introduced in the future as a result of continuous\ncollaboration with the FHIR community to refine the\n[desired SQL projection of FHIR\nresources](https://github.com/FHIR/sql-on-fhir/blob/master/sql-on-fhir.md)"
        },
        "gcsDestination": {
          "$ref": "GoogleCloudHealthcareV1alpha2FhirRestGcsDestination",
          "description": "The Cloud Storage output destination.\n\nThe Cloud Storage location requires the `roles/storage.objectAdmin` Cloud\nIAM role.\n\nThe exported outputs are\norganized by FHIR resource types. The server will create one object per\nresource type. Each object contains newline delimited JSON, and each line\nis a FHIR resource."
        }
      },
      "type": "object"
    },
    "Expr": {
      "description": "Represents an expression text. Example:\n\n    title: \"User account presence\"\n    description: \"Determines whether the request has a user account\"\n    expression: \"size(request.user) \u003e 0\"",
      "id": "Expr",
      "properties": {
        "description": {
          "description": "An optional description of the expression. This is a longer text which\ndescribes the expression, e.g. when hovered over it in a UI.",
          "type": "string"
        },
        "expression": {
          "description": "Textual representation of an expression in\nCommon Expression Language syntax.\n\nThe application context of the containing message determines which\nwell-known feature set of CEL is supported.",
          "type": "string"
        },
        "location": {
          "description": "An optional string indicating the location of the expression for error\nreporting, e.g. a file name and a position in the file.",
          "type": "string"
        },
        "title": {
          "description": "An optional title for the expression, i.e. a short string describing\nits purpose. This can be used e.g. in UIs which allow to enter the\nexpression.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "FhirConfig": {
      "description": "Specifies how de-identification of a FHIR store should be handled.",
      "id": "FhirConfig",
      "properties": {},
      "type": "object"
    },
    "FhirStore": {
      "description": "Represents a FHIR store.",
      "id": "FhirStore",
      "properties": {
        "disableReferentialIntegrity": {
          "description": "Whether to disable referential integrity in this FHIR store. This field is\nimmutable after FHIR store creation.\nThe default value is false, meaning that the API will enforce referential\nintegrity and fail the requests that will result in inconsistent state in\nthe FHIR store.\nWhen this field is set to true, the API will skip referential integrity\ncheck. Consequently, operations that rely on references, such as\nGetPatientEverything, will not return all the results if broken references\nexist.",
          "type": "boolean"
        },
        "disableResourceVersioning": {
          "description": "Whether to disable resource versioning for this FHIR store. This field can\nnot be changed after the creation of FHIR store.\nIf set to false, which is the default behavior, all write operations will\ncause historical versions to be recorded automatically. The historical\nversions can be fetched through the history APIs, but cannot be updated.\nIf set to true, no historical versions will be kept. The server will send\nback errors for attempts to read the historical versions.",
          "type": "boolean"
        },
        "enableHistoryImport": {
          "description": "Whether to allow the bulk import API to accept history bundles and directly\ninsert historical resource versions into the FHIR store. Importing resource\nhistories creates resource interactions that appear to have occurred in the\npast, which clients may not want to allow. If set to false, history bundles\nwithin an import will fail with an error.",
          "type": "boolean"
        },
        "enableUpdateCreate": {
          "description": "Whether this FHIR store has the [updateCreate\ncapability](https://www.hl7.org/fhir/capabilitystatement-definitions.html#CapabilityStatement.rest.resource.updateCreate).\nThis determines if the client can use an Update operation to create a new\nresource with a client-specified ID. If false, all IDs are server-assigned\nthrough the Create operation and attempts to Update a non-existent resource\nwill return errors. Please treat the audit logs with appropriate levels of\ncare if client-specified resource IDs contain sensitive data such as\npatient identifiers, those IDs will be part of the FHIR resource path\nrecorded in Cloud audit logs and Cloud Pub/Sub notifications.",
          "type": "boolean"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "User-supplied key-value pairs used to organize FHIR stores.\n\nLabel keys must be between 1 and 63 characters long, have a UTF-8 encoding\nof maximum 128 bytes, and must conform to the\nfollowing PCRE regular expression:\n\\p{Ll}\\p{Lo}{0,62}\n\nLabel values are optional, must be between 1 and 63 characters long, have\na UTF-8 encoding of maximum 128 bytes, and must conform to the\nfollowing PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}\n\nNo more than 64 labels can be associated with a given store.",
          "type": "object"
        },
        "name": {
          "description": "Output only. Resource name of the FHIR store, of the form\n`projects/{project_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.",
          "type": "string"
        },
        "notificationConfig": {
          "$ref": "NotificationConfig",
          "description": "If non-empty, publish all resource modifications of this FHIR store to\nthis destination. The Cloud Pub/Sub message attributes will contain a map\nwith a string describing the action that has triggered the notification,\ne.g. \"action\":\"CreateResource\"."
        }
      },
      "type": "object"
    },
    "Finding": {
      "id": "Finding",
      "properties": {
        "end": {
          "description": "Zero-based ending index of the found text, exclusively.",
          "format": "int64",
          "type": "string"
        },
        "infoType": {
          "description": "The type of information stored in this text range (e.g. HumanName,\nBirthDate, Address, etc.)",
          "type": "string"
        },
        "start": {
          "description": "Zero-based starting index of the found text, inclusively.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GetIamPolicyRequest": {
      "description": "Request message for `GetIamPolicy` method.",
      "id": "GetIamPolicyRequest",
      "properties": {},
      "type": "object"
    },
    "GoogleCloudHealthcareV1alpha2DicomBigQueryDestination": {
      "description": "The BigQuery table where the output should be written.",
      "id": "GoogleCloudHealthcareV1alpha2DicomBigQueryDestination",
      "properties": {
        "force": {
          "description": "If the destination table already exists and this flag is `TRUE`, the table\nwill be overwritten by the contents of the DICOM store. If the flag is not\nset and the destination table already exists, the export call returns an\nerror.",
          "type": "boolean"
        },
        "tableUri": {
          "description": "BigQuery URI to a table, up to 2000 characters long.\nAccepted forms:\n*  BigQuery gs path e.g. bq://projectId.bqDatasetId.tableId",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudHealthcareV1alpha2DicomGcsDestination": {
      "description": "The Cloud Storage location where the output should be written, and the export\nconfiguration.",
      "id": "GoogleCloudHealthcareV1alpha2DicomGcsDestination",
      "properties": {
        "mimeType": {
          "description": "MIME types supported by DICOM spec.\nEach file will be written in the following format:\n`.../{study_id}/{series_id}/{instance_id}[/{frame_number}].{extension}`\nThe frame_number component will exist only for multi-frame instances.\n\nRefer to the DICOM conformance statement for permissible MIME types:\nhttps://cloud.google.com/healthcare/docs/dicom#wado-rs\n\nThe following extensions will be used for output files:\n  application/dicom -\u003e .dcm\n  image/jpeg -\u003e .jpg\n  image/png -\u003e .png\n\nIf unspecified, the instances will be exported in their original\nDICOM format.",
          "type": "string"
        },
        "uriPrefix": {
          "description": "The Cloud Storage destination to export to.\n\nURI for a Cloud Storage directory where result files should be written (in\nthe format `gs://{bucket-id}/{path/to/destination/dir}`). If there is no\ntrailing slash, the service will append one when composing the object path.\nThe user is responsible for creating the Cloud Storage bucket referenced in\n`uri_prefix`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudHealthcareV1alpha2DicomGcsSource": {
      "description": "Specifies the configuration for importing data from Cloud Storage.",
      "id": "GoogleCloudHealthcareV1alpha2DicomGcsSource",
      "properties": {
        "uri": {
          "description": "Points to a Cloud Storage URI containing file(s) with\ncontent only. The URI must be in the following format:\n`gs://{bucket_id}/{object_id}`. The URI can include wildcards in\n`object_id` and thus identify multiple files. Supported wildcards:\n '*' to match 0 or more non-separator characters\n '**' to match 0 or more characters (including separators). Must be used at\n      the end of a path and with no other wildcards in the\n      path. Can also be used with a file extension (such as .dcm), which\n      imports all files with the extension in the specified directory and\n      its sub-directories. For example,\n      `gs://my-bucket/my-directory/**.dcm` imports all files with .dcm\n      extensions in `my-directory/` and its sub-directories.\n '?' to match 1 character\nAll other URI formats are invalid.\nFiles matching the wildcard are expected to contain content only, no\nmetadata.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudHealthcareV1alpha2FhirBigQueryDestination": {
      "description": "The configuration for exporting to BigQuery.",
      "id": "GoogleCloudHealthcareV1alpha2FhirBigQueryDestination",
      "properties": {
        "datasetUri": {
          "description": "BigQuery URI to a dataset, up to 2000 characters long.\nAccepted forms:\n*  BigQuery gs path e.g. bq://projectId.bqDatasetId",
          "type": "string"
        },
        "schemaConfig": {
          "$ref": "SchemaConfig",
          "description": "The configuration for the exported BigQuery schema."
        }
      },
      "type": "object"
    },
    "GoogleCloudHealthcareV1alpha2FhirRestExportResourcesResponse": {
      "description": "Final response of exporting resources.\nThis structure will be included in the\nresponse to describe the detailed\noutcome. It will only be included when the operation finishes.",
      "id": "GoogleCloudHealthcareV1alpha2FhirRestExportResourcesResponse",
      "properties": {
        "fhirStore": {
          "description": "The name of the FHIR store where resources have been exported, in the\nformat\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.",
          "type": "string"
        },
        "resourceCount": {
          "description": "The total number of resources exported from the requested FHIR store.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudHealthcareV1alpha2FhirRestGcsDestination": {
      "description": "The configuration for exporting to Cloud Storage.",
      "id": "GoogleCloudHealthcareV1alpha2FhirRestGcsDestination",
      "properties": {
        "uriPrefix": {
          "description": "URI for a Cloud Storage directory where result files should be written (in\nthe format `gs://{bucket-id}/{path/to/destination/dir}`). If there is no\ntrailing slash, the service will append one when composing the object path.\nThe user is responsible for creating the Cloud Storage bucket referenced in\n`uri_prefix`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudHealthcareV1alpha2FhirRestGcsErrorDestination": {
      "description": "Specifies the Cloud Storage destination for exporting errors to.",
      "id": "GoogleCloudHealthcareV1alpha2FhirRestGcsErrorDestination",
      "properties": {
        "uriPrefix": {
          "description": "URI for a Cloud Storage directory to which result files\nshould be written (in the\nformat `gs://{bucket-id}/{path/to/destination/dir}`). If there is no\ntrailing slash, the service will append one when composing the object path.\nThe user is responsible for creating the Cloud Storage bucket referenced in\n`uri_prefix`.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudHealthcareV1alpha2FhirRestGcsSource": {
      "description": "Specifies the configuration for importing data from Cloud Storage.",
      "id": "GoogleCloudHealthcareV1alpha2FhirRestGcsSource",
      "properties": {
        "uri": {
          "description": "Points to a Cloud Storage URI containing file(s) with\ncontent only. The URI must be in the following format:\n`gs://{bucket_id}/{object_id}`. The URI can include wildcards in\n`object_id` and thus identify multiple files. Supported wildcards:\n '*' to match 0 or more non-separator characters\n '**' to match 0 or more characters (including separators). Must be used at\n      the end of a path and with no other wildcards in the\n      path. Can also be used with a file extension (such as .dcm), which\n      imports all files with the extension in the specified directory and\n      its sub-directories. For example,\n      `gs://my-bucket/my-directory/**.dcm` imports all files with .dcm\n      extensions in `my-directory/` and its sub-directories.\n '?' to match 1 character\nAll other URI formats are invalid.\nFiles matching the wildcard are expected to contain content only, no\nmetadata.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudHealthcareV1alpha2FhirRestImportResourcesErrorDetails": {
      "description": "Error response of importing resources.\nThis structure will be included in the\nerror details to describe the\ndetailed error. It will only be included when the operation finishes with\nsome failure.",
      "id": "GoogleCloudHealthcareV1alpha2FhirRestImportResourcesErrorDetails",
      "properties": {
        "errorCount": {
          "description": "The number of resources that had errors.",
          "format": "int64",
          "type": "string"
        },
        "fhirStore": {
          "description": "The name of the FHIR store where resources have been imported, in the\nformat\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.",
          "type": "string"
        },
        "inputSize": {
          "description": "The total number of resources included in the source data. This is the sum\nof the success and error counts.",
          "format": "int64",
          "type": "string"
        },
        "successCount": {
          "description": "The number of resources that have been imported.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "GoogleCloudHealthcareV1alpha2FhirRestImportResourcesResponse": {
      "description": "Final response of importing resources.\nThis structure will be included in the\nresponse to describe the detailed\noutcome. It will only be included when the operation finishes successfully.",
      "id": "GoogleCloudHealthcareV1alpha2FhirRestImportResourcesResponse",
      "properties": {
        "fhirStore": {
          "description": "The name of the FHIR store where the resources have been imported, in the\nformat\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/fhirStores/{fhir_store_id}`.",
          "type": "string"
        },
        "inputSize": {
          "description": "The total number of resources included in the source data.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Hl7V2Store": {
      "description": "Represents an HL7v2 store.",
      "id": "Hl7V2Store",
      "properties": {
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "User-supplied key-value pairs used to organize HL7v2 stores.\n\nLabel keys must be between 1 and 63 characters long, have a UTF-8 encoding\nof maximum 128 bytes, and must conform to the\nfollowing PCRE regular expression:\n\\p{Ll}\\p{Lo}{0,62}\n\nLabel values are optional, must be between 1 and 63 characters long, have\na UTF-8 encoding of maximum 128 bytes, and must conform to the\nfollowing PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}\n\nNo more than 64 labels can be associated with a given store.",
          "type": "object"
        },
        "name": {
          "description": "Output only. Resource name of the HL7v2 store, of the form\n`projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7v2_store_id}`.",
          "type": "string"
        },
        "notificationConfig": {
          "$ref": "NotificationConfig",
          "description": "The notification destination all messages (both Ingest \u0026 Create) are\npublished on. Only the message name is sent as part of the notification. If\nthis is unset, no notifications will be sent. Supplied by the client."
        },
        "parserConfig": {
          "$ref": "ParserConfig",
          "description": "The configuration for the parser. It determines how the server parses the\nmessages."
        }
      },
      "type": "object"
    },
    "HttpBody": {
      "description": "Message that represents an arbitrary HTTP body. It should only be used for\npayload formats that can't be represented as JSON, such as raw binary or\nan HTML page.\n\n\nThis message can be used both in streaming and non-streaming API methods in\nthe request as well as the response.\n\nIt can be used as a top-level request field, which is convenient if one\nwants to extract parameters from either the URL or HTTP template into the\nrequest fields and also want access to the raw HTTP body.\n\nExample:\n\n    message GetResourceRequest {\n      // A unique request id.\n      string request_id = 1;\n\n      // The raw HTTP body is bound to this field.\n      google.api.HttpBody http_body = 2;\n    }\n\n    service ResourceService {\n      rpc GetResource(GetResourceRequest) returns (google.api.HttpBody);\n      rpc UpdateResource(google.api.HttpBody) returns (google.protobuf.Empty);\n    }\n\nExample with streaming methods:\n\n    service CaldavService {\n      rpc GetCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n      rpc UpdateCalendar(stream google.api.HttpBody)\n        returns (stream google.api.HttpBody);\n    }\n\nUse of this type only changes how the request and response bodies are\nhandled, all other features will continue to work unchanged.",
      "id": "HttpBody",
      "properties": {
        "contentType": {
          "description": "The HTTP Content-Type header value specifying the content type of the body.",
          "type": "string"
        },
        "data": {
          "description": "The HTTP request/response body as raw binary.",
          "format": "byte",
          "type": "string"
        },
        "extensions": {
          "description": "Application specific response metadata. Must be set in the first response\nfor streaming APIs.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ImageAnnotation": {
      "description": "Image annotation.",
      "id": "ImageAnnotation",
      "properties": {
        "boundingPolys": {
          "description": "The list of polygons outlining the sensitive regions in the image.",
          "items": {
            "$ref": "BoundingPoly"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ImageConfig": {
      "description": "Specifies how de-identification of image pixel should be handled.",
      "id": "ImageConfig",
      "properties": {
        "textRedactionMode": {
          "description": "Determines how to redact text from image.",
          "enum": [
            "TEXT_REDACTION_MODE_UNSPECIFIED",
            "REDACT_ALL_TEXT"
          ],
          "enumDescriptions": [
            "No text redaction specified. Same as REDACT_NO_TEXT.",
            "Redact all text."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "ImportDicomDataErrorDetails": {
      "description": "Returns the errors encountered during DICOM store import.",
      "id": "ImportDicomDataErrorDetails",
      "properties": {
        "dicomStore": {
          "description": "The name of the DICOM store where the resources have been imported, in the\nformat\n`projects/{project_id}/locations/{location_id}/datasets/{dataset_id}/dicomStores/{dicom_store_id}`",
          "type": "string"
        },
        "sampleErrors": {
          "description": "Contains sample errors encountered in imports of individual resources\n(e.g., a Cloud Storage object).",
          "items": {
            "$ref": "ErrorDetail"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ImportDicomDataRequest": {
      "description": "Imports data into the specified DICOM store.\nReturns an error if any of the files to import are not DICOM files. This\nAPI will accept duplicate DICOM instances, by simply ignoring the newly\npushed instance (it will not overwrite).",
      "id": "ImportDicomDataRequest",
      "properties": {
        "gcsSource": {
          "$ref": "GoogleCloudHealthcareV1alpha2DicomGcsSource",
          "description": "Cloud Storage source data location and import configuration.\n\nThe Cloud Storage location requires the `roles/storage.objectViewer`\nCloud IAM role."
        }
      },
      "type": "object"
    },
    "ImportResourcesRequest": {
      "description": "Request to import resources.\nThe FHIR resources to be imported must have client supplied IDs. The server\nwill retain the resource IDs. The import operation is idempotent. Retry will\noverwrite existing data identified by client supplied IDs. The import\noperation is not transactional. The server will not roll back any committed\nchanges upon partial failures.",
      "id": "ImportResourcesRequest",
      "properties": {
        "contentStructure": {
          "description": "The content structure in the source location. The default is\nBUNDLE.",
          "enum": [
            "CONTENT_STRUCTURE_UNSPECIFIED",
            "BUNDLE",
            "RESOURCE"
          ],
          "enumDescriptions": [
            "",
            "Each unit is a bundle, which contains one or more resources.",
            "Each unit is a single resource."
          ],
          "type": "string"
        },
        "gcsErrorDestination": {
          "$ref": "GoogleCloudHealthcareV1alpha2FhirRestGcsErrorDestination",
          "description": "The Cloud Storage destination to write the error report to.\n\nThe Cloud Storage location requires the `roles/storage.objectAdmin` Cloud\nIAM role.\n\nNote that writing a file to the same destination multiple times will\nresult in the previous version of the file being overwritten."
        },
        "gcsSource": {
          "$ref": "GoogleCloudHealthcareV1alpha2FhirRestGcsSource",
          "description": "Cloud Storage source data location and import configuration.\n\nThe Cloud Storage location requires the `roles/storage.objectViewer`\nCloud IAM role.\n\nEach Cloud Storage object should be a text file that contains newline\ndelimited JSON structures conforming to FHIR standard."
        }
      },
      "type": "object"
    },
    "IngestMessageRequest": {
      "description": "Ingests a message into the specified HL7v2 store.",
      "id": "IngestMessageRequest",
      "properties": {
        "message": {
          "$ref": "Message",
          "description": "HL7v2 message to ingest."
        }
      },
      "type": "object"
    },
    "IngestMessageResponse": {
      "description": "Acknowledges that a message has been ingested into the specified\nHL7v2 store.",
      "id": "IngestMessageResponse",
      "properties": {
        "hl7Ack": {
          "description": "HL7v2 ACK message.",
          "format": "byte",
          "type": "string"
        },
        "message": {
          "$ref": "Message",
          "description": "Created message resource."
        }
      },
      "type": "object"
    },
    "ListAnnotationStoresResponse": {
      "description": "Lists the Annotation stores\nin the given dataset.",
      "id": "ListAnnotationStoresResponse",
      "properties": {
        "annotationStores": {
          "description": "The returned Annotation stores. Won't be more Annotation stores than the\nvalue of page_size in the request.",
          "items": {
            "$ref": "AnnotationStore"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more\nresults in the list.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListAnnotationsResponse": {
      "description": "Lists the Annotations in the specified\nAnnotation store.",
      "id": "ListAnnotationsResponse",
      "properties": {
        "annotations": {
          "description": "The returned Annotations names. Won't be more values than the value of\npage_size in the request.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more\nresults in the list.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListDatasetsResponse": {
      "description": "Lists the available datasets.",
      "id": "ListDatasetsResponse",
      "properties": {
        "datasets": {
          "description": "The first page of datasets.",
          "items": {
            "$ref": "Dataset"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results, or empty if there are no\nmore results in the list.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListDicomStoresResponse": {
      "description": "Lists the DICOM stores in the given dataset.",
      "id": "ListDicomStoresResponse",
      "properties": {
        "dicomStores": {
          "description": "The returned DICOM stores. Won't be more DICOM stores than the value of\npage_size in the request.",
          "items": {
            "$ref": "DicomStore"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more\nresults in the list.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListFhirStoresResponse": {
      "description": "Lists the FHIR stores in the given dataset.",
      "id": "ListFhirStoresResponse",
      "properties": {
        "fhirStores": {
          "description": "The returned FHIR stores. Won't be more FHIR stores than the value of\npage_size in the request.",
          "items": {
            "$ref": "FhirStore"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more\nresults in the list.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListHl7V2StoresResponse": {
      "description": "Lists the HL7v2 stores in the given dataset.",
      "id": "ListHl7V2StoresResponse",
      "properties": {
        "hl7V2Stores": {
          "description": "The returned HL7v2 stores. Won't be more HL7v2 stores than the value of\npage_size in the request.",
          "items": {
            "$ref": "Hl7V2Store"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more\nresults in the list.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListLocationsResponse": {
      "description": "The response message for Locations.ListLocations.",
      "id": "ListLocationsResponse",
      "properties": {
        "locations": {
          "description": "A list of locations that matches the specified filter in the request.",
          "items": {
            "$ref": "Location"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListMessagesResponse": {
      "description": "Lists the messages in the specified HL7v2 store.",
      "id": "ListMessagesResponse",
      "properties": {
        "messages": {
          "description": "The returned message names. Won't be more values than the value of\npage_size in the request.",
          "items": {
            "type": "string"
          },
          "type": "array"
        },
        "nextPageToken": {
          "description": "Token to retrieve the next page of results or empty if there are no more\nresults in the list.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ListOperationsResponse": {
      "description": "The response message for Operations.ListOperations.",
      "id": "ListOperationsResponse",
      "properties": {
        "nextPageToken": {
          "description": "The standard List next-page token.",
          "type": "string"
        },
        "operations": {
          "description": "A list of operations that matches the specified filter in the request.",
          "items": {
            "$ref": "Operation"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Location": {
      "description": "A resource that represents Google Cloud Platform location.",
      "id": "Location",
      "properties": {
        "displayName": {
          "description": "The friendly name for this location, typically a nearby city name.\nFor example, \"Tokyo\".",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "Cross-service attributes for the location. For example\n\n    {\"cloud.googleapis.com/region\": \"us-east1\"}",
          "type": "object"
        },
        "locationId": {
          "description": "The canonical id for this location. For example: `\"us-east1\"`.",
          "type": "string"
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "Service-specific metadata. For example the available capacity at the given\nlocation.",
          "type": "object"
        },
        "name": {
          "description": "Resource name for the location, which may vary between implementations.\nFor example: `\"projects/example-project/locations/us-east1\"`",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Message": {
      "description": "A complete HL7v2 message.\nSee http://www.hl7.org/implement/standards/index.cfm?ref=common for details\non the standard.",
      "id": "Message",
      "properties": {
        "createTime": {
          "description": "The datetime when the message was created. Set by the server.",
          "format": "google-datetime",
          "type": "string"
        },
        "data": {
          "description": "Raw message bytes.",
          "format": "byte",
          "type": "string"
        },
        "labels": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "User-supplied key-value pairs used to organize HL7v2 stores.\n\nLabel keys must be between 1 and 63 characters long, have a UTF-8 encoding\nof maximum 128 bytes, and must conform to the\nfollowing PCRE regular expression:\n\\p{Ll}\\p{Lo}{0,62}\n\nLabel values are optional, must be between 1 and 63 characters long, have\na UTF-8 encoding of maximum 128 bytes, and must conform to the\nfollowing PCRE regular expression: [\\p{Ll}\\p{Lo}\\p{N}_-]{0,63}\n\nNo more than 64 labels can be associated with a given store.",
          "type": "object"
        },
        "messageType": {
          "description": "The message type and trigger event for this message. MSH-9.",
          "type": "string"
        },
        "name": {
          "description": "Resource name of the Message, of the form\n`projects/{project_id}/datasets/{dataset_id}/hl7V2Stores/{hl7_v2_store_id}/messages/{message_id}`.\nAssigned by the server.",
          "type": "string"
        },
        "parsedData": {
          "$ref": "ParsedData",
          "description": "The parsed version of the raw message data."
        },
        "patientIds": {
          "description": "All patient IDs listed in the PID-2, PID-3, and PID-4 segments of this\nmessage.",
          "items": {
            "$ref": "PatientId"
          },
          "type": "array"
        },
        "sendFacility": {
          "description": "The hospital that this message came from. MSH-4.",
          "type": "string"
        },
        "sendTime": {
          "description": "The datetime the sending application sent this message. MSH-7.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "type": "object"
    },
    "NotificationConfig": {
      "description": "Specifies where notifications should be sent upon changes to a data store.",
      "id": "NotificationConfig",
      "properties": {
        "pubsubTopic": {
          "description": "The [Cloud Pub/Sub](https://cloud.google.com/pubsub/docs/) topic that\nnotifications of changes are published on. Supplied by the client.\nPubsubMessage.Data will contain the resource name.\nPubsubMessage.MessageId is the ID of this message. It is guaranteed to be\nunique within the topic.\nPubsubMessage.PublishTime is the time at which the message was published.\nNotifications are only sent if the topic is\nnon-empty. [Topic\nnames](https://cloud.google.com/pubsub/docs/overview#names) must be scoped\nto a project. cloud-healthcare@system.gserviceaccount.com must have\npublisher permissions on the given Cloud Pub/Sub topic. Not having adequate\npermissions will cause the calls that send notifications to fail.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Operation": {
      "description": "This resource represents a long-running operation that is the result of a\nnetwork API call.",
      "id": "Operation",
      "properties": {
        "done": {
          "description": "If the value is `false`, it means the operation is still in progress.\nIf `true`, the operation is completed, and either `error` or `response` is\navailable.",
          "type": "boolean"
        },
        "error": {
          "$ref": "Status",
          "description": "The error result of the operation in case of failure or cancellation."
        },
        "metadata": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "Service-specific metadata associated with the operation.  It typically\ncontains progress information and common metadata such as create time.\nSome services might not provide such metadata.  Any method that returns a\nlong-running operation should document the metadata type, if any.",
          "type": "object"
        },
        "name": {
          "description": "The server-assigned name, which is only unique within the same service that\noriginally returns it. If you use the default HTTP mapping, the\n`name` should have the format of `operations/some/unique/name`.",
          "type": "string"
        },
        "response": {
          "additionalProperties": {
            "description": "Properties of the object. Contains field @type with type URL.",
            "type": "any"
          },
          "description": "The normal response of the operation in case of success.  If the original\nmethod returns no data on success, such as `Delete`, the response is\n`google.protobuf.Empty`.  If the original method is standard\n`Get`/`Create`/`Update`, the response should be the resource.  For other\nmethods, the response should have the type `XxxResponse`, where `Xxx`\nis the original method name.  For example, if the original method name\nis `TakeSnapshot()`, the inferred response type is\n`TakeSnapshotResponse`.",
          "type": "object"
        }
      },
      "type": "object"
    },
    "OperationMetadata": {
      "description": "OperationMetadata provides information about the operation execution.\nReturned in the long-running operation's metadata field.",
      "id": "OperationMetadata",
      "properties": {
        "apiMethodName": {
          "description": "The name of the API method that initiated the operation.",
          "type": "string"
        },
        "counter": {
          "$ref": "ProgressCounter"
        },
        "createTime": {
          "description": "The time at which the operation was created by the API.",
          "format": "google-datetime",
          "type": "string"
        },
        "endTime": {
          "description": "The time at which execution was completed.",
          "format": "google-datetime",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ParsedData": {
      "description": "The content of a HL7v2 message in a structured format.",
      "id": "ParsedData",
      "properties": {
        "segments": {
          "items": {
            "$ref": "Segment"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "ParserConfig": {
      "description": "The configuration for the parser. It determines how the server parses the\nmessages.",
      "id": "ParserConfig",
      "properties": {
        "allowNullHeader": {
          "description": "Determines whether messages with no header are allowed.",
          "type": "boolean"
        },
        "segmentTerminator": {
          "description": "Byte(s) to be used as the segment terminator. If this is unset, '\\r' will\nbe used as segment terminator.",
          "format": "byte",
          "type": "string"
        }
      },
      "type": "object"
    },
    "PatientId": {
      "description": "A patient identifier and associated type.",
      "id": "PatientId",
      "properties": {
        "type": {
          "description": "ID type, e.g. MRN or NHS.",
          "type": "string"
        },
        "value": {
          "description": "The patient's unique identifier.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Policy": {
      "description": "Defines an Identity and Access Management (IAM) policy. It is used to\nspecify access control policies for Cloud Platform resources.\n\n\nA `Policy` consists of a list of `bindings`. A `binding` binds a list of\n`members` to a `role`, where the members can be user accounts, Google groups,\nGoogle domains, and service accounts. A `role` is a named list of permissions\ndefined by IAM.\n\n**JSON Example**\n\n    {\n      \"bindings\": [\n        {\n          \"role\": \"roles/owner\",\n          \"members\": [\n            \"user:mike@example.com\",\n            \"group:admins@example.com\",\n            \"domain:google.com\",\n            \"serviceAccount:my-other-app@appspot.gserviceaccount.com\"\n          ]\n        },\n        {\n          \"role\": \"roles/viewer\",\n          \"members\": [\"user:sean@example.com\"]\n        }\n      ]\n    }\n\n**YAML Example**\n\n    bindings:\n    - members:\n      - user:mike@example.com\n      - group:admins@example.com\n      - domain:google.com\n      - serviceAccount:my-other-app@appspot.gserviceaccount.com\n      role: roles/owner\n    - members:\n      - user:sean@example.com\n      role: roles/viewer\n\n\nFor a description of IAM and its features, see the\n[IAM developer's guide](https://cloud.google.com/iam/docs).",
      "id": "Policy",
      "properties": {
        "auditConfigs": {
          "description": "Specifies cloud audit logging configuration for this policy.",
          "items": {
            "$ref": "AuditConfig"
          },
          "type": "array"
        },
        "bindings": {
          "description": "Associates a list of `members` to a `role`.\n`bindings` with no members will result in an error.",
          "items": {
            "$ref": "Binding"
          },
          "type": "array"
        },
        "etag": {
          "description": "`etag` is used for optimistic concurrency control as a way to help\nprevent simultaneous updates of a policy from overwriting each other.\nIt is strongly suggested that systems make use of the `etag` in the\nread-modify-write cycle to perform policy updates in order to avoid race\nconditions: An `etag` is returned in the response to `getIamPolicy`, and\nsystems are expected to put that etag in the request to `setIamPolicy` to\nensure that their change will be applied to the same version of the policy.\n\nIf no `etag` is provided in the call to `setIamPolicy`, then the existing\npolicy is overwritten blindly.",
          "format": "byte",
          "type": "string"
        },
        "version": {
          "description": "Deprecated.",
          "format": "int32",
          "type": "integer"
        }
      },
      "type": "object"
    },
    "ProgressCounter": {
      "description": "ProgressCounter provides counters to describe an operation's progress.",
      "id": "ProgressCounter",
      "properties": {
        "failure": {
          "description": "The number of units that failed in the operation.",
          "format": "int64",
          "type": "string"
        },
        "pending": {
          "description": "The number of units that are pending in the operation.",
          "format": "int64",
          "type": "string"
        },
        "success": {
          "description": "The number of units that succeeded in the operation.",
          "format": "int64",
          "type": "string"
        }
      },
      "type": "object"
    },
    "ResourceAnnotation": {
      "description": "Resource level annotation.",
      "id": "ResourceAnnotation",
      "properties": {
        "label": {
          "type": "string"
        }
      },
      "type": "object"
    },
    "SchemaConfig": {
      "description": "Configuration for the FHIR BigQuery schema. Determines how the server\ngenerates the schema.",
      "id": "SchemaConfig",
      "properties": {
        "recursiveStructureDepth": {
          "description": "The depth for all recursive structures in the output analytics\nschema. For example, concept in the CodeSystem resource is a recursive\nstructure; when the depth is 2, the CodeSystem table will have a column\ncalled `concept.concept` but not `concept.concept.concept`. If not\nspecified or set to 0, the server will use the default value 2.",
          "format": "int64",
          "type": "string"
        },
        "schemaType": {
          "description": "Specifies the output schema type. If unspecified, the default is\n`LOSSLESS`.",
          "enum": [
            "SCHEMA_TYPE_UNSPECIFIED",
            "LOSSLESS",
            "ANALYTICS"
          ],
          "enumDescriptions": [
            "No schema type specified. Same as `LOSSLESS`.",
            "Schema generated from original FHIR data.",
            "Analytics schema defined by the FHIR community.\nSee https://github.com/rbrush/sql-on-fhir/blob/master/sql-on-fhir.md."
          ],
          "type": "string"
        }
      },
      "type": "object"
    },
    "SearchResourcesRequest": {
      "description": "Request to search the resources in the specified FHIR store.",
      "id": "SearchResourcesRequest",
      "properties": {
        "resourceType": {
          "description": "The type of the resource to search.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Segment": {
      "description": "A segment in a structured format.",
      "id": "Segment",
      "properties": {
        "fields": {
          "additionalProperties": {
            "type": "string"
          },
          "description": "A mapping from the positional location to the value.\nThe key string uses zero-based indexes separated by dots to identify\nFields, components and sub-components. A bracket notation is also used to\nidentify different instances of a repeated field.\nRegex for key: (\\d+)(\\[\\d+\\])?(.\\d+)?(.\\d+)?\n\nExamples of (key, value) pairs:\n- (0.1, \"foo\"): Component 1 of Field 0 has the value \"foo\".\n- (1.1.2, \"bar\"): Sub-component 2 of Component 1 of field 1 has the value\n\"bar\".\n- (1[2].1, \"baz\"): Component 1 of Instance 2 of Field 1, which is repeated,\nhas the value \"baz\".",
          "type": "object"
        },
        "segmentId": {
          "description": "A string that indicates the type of segment, e.g., EVN, PID.",
          "type": "string"
        },
        "setId": {
          "description": "Set ID for segments that can be in a set. This can be empty if it is\nmissing or it is not applicable.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "SensitiveTextAnnotation": {
      "description": "A TextAnnotation specifies a text range that includes sensitive information.",
      "id": "SensitiveTextAnnotation",
      "properties": {
        "details": {
          "additionalProperties": {
            "$ref": "Detail"
          },
          "description": "Maps from a resource slice (e.g. FHIR resource field path) to a set of\nsensitive text findings. For example,\nAppointment.Narrative text1 --\u003e {findings_1, findings_2, findings_3}",
          "type": "object"
        }
      },
      "type": "object"
    },
    "SetIamPolicyRequest": {
      "description": "Request message for `SetIamPolicy` method.",
      "id": "SetIamPolicyRequest",
      "properties": {
        "policy": {
          "$ref": "Policy",
          "description": "REQUIRED: The complete policy to be applied to the `resource`. The size of\nthe policy is limited to a few 10s of KB. An empty policy is a\nvalid policy but certain Cloud Platform services (such as Projects)\nmight reject them."
        },
        "updateMask": {
          "description": "OPTIONAL: A FieldMask specifying which fields of the policy to modify. Only\nthe fields in the mask will be modified. If no mask is provided, the\nfollowing default mask is used:\npaths: \"bindings, etag\"\nThis field is only used by Cloud IAM.",
          "format": "google-fieldmask",
          "type": "string"
        }
      },
      "type": "object"
    },
    "Status": {
      "description": "The `Status` type defines a logical error model that is suitable for different\nprogramming environments, including REST APIs and RPC APIs. It is used by\n[gRPC](https://github.com/grpc). The error model is designed to be:\n\n- Simple to use and understand for most users\n- Flexible enough to meet unexpected needs\n\n# Overview\n\nThe `Status` message contains three pieces of data: error code, error message,\nand error details. The error code should be an enum value of\ngoogle.rpc.Code, but it may accept additional error codes if needed.  The\nerror message should be a developer-facing English message that helps\ndevelopers *understand* and *resolve* the error. If a localized user-facing\nerror message is needed, put the localized message in the error details or\nlocalize it in the client. The optional error details may contain arbitrary\ninformation about the error. There is a predefined set of error detail types\nin the package `google.rpc` that can be used for common error conditions.\n\n# Language mapping\n\nThe `Status` message is the logical representation of the error model, but it\nis not necessarily the actual wire format. When the `Status` message is\nexposed in different client libraries and different wire protocols, it can be\nmapped differently. For example, it will likely be mapped to some exceptions\nin Java, but more likely mapped to some error codes in C.\n\n# Other uses\n\nThe error model and the `Status` message can be used in a variety of\nenvironments, either with or without APIs, to provide a\nconsistent developer experience across different environments.\n\nExample uses of this error model include:\n\n- Partial errors. If a service needs to return partial errors to the client,\n    it may embed the `Status` in the normal response to indicate the partial\n    errors.\n\n- Workflow errors. A typical workflow has multiple steps. Each step may\n    have a `Status` message for error reporting.\n\n- Batch operations. If a client uses batch request and batch response, the\n    `Status` message should be used directly inside batch response, one for\n    each error sub-response.\n\n- Asynchronous operations. If an API call embeds asynchronous operation\n    results in its response, the status of those operations should be\n    represented directly using the `Status` message.\n\n- Logging. If some API errors are stored in logs, the message `Status` could\n    be used directly after any stripping needed for security/privacy reasons.",
      "id": "Status",
      "properties": {
        "code": {
          "description": "The status code, which should be an enum value of google.rpc.Code.",
          "format": "int32",
          "type": "integer"
        },
        "details": {
          "description": "A list of messages that carry the error details.  There is a common set of\nmessage types for APIs to use.",
          "items": {
            "additionalProperties": {
              "description": "Properties of the object. Contains field @type with type URL.",
              "type": "any"
            },
            "type": "object"
          },
          "type": "array"
        },
        "message": {
          "description": "A developer-facing error message, which should be in English. Any\nuser-facing error message should be localized and sent in the\ngoogle.rpc.Status.details field, or localized by the client.",
          "type": "string"
        }
      },
      "type": "object"
    },
    "TagFilterList": {
      "description": "List of tags to be filtered.",
      "id": "TagFilterList",
      "properties": {
        "tags": {
          "description": "Tags to be filtered. Tags must be DICOM Data Elements, File Meta\nElements, or Directory Structuring Elements, as defined at:\nhttp://dicom.nema.org/medical/dicom/current/output/html/part06.html#table_6-1,.\nThey may be provided by \"Keyword\" or \"Tag\". For example \"PatientID\",\n\"0010,0010\".",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TestIamPermissionsRequest": {
      "description": "Request message for `TestIamPermissions` method.",
      "id": "TestIamPermissionsRequest",
      "properties": {
        "permissions": {
          "description": "The set of permissions to check for the `resource`. Permissions with\nwildcards (such as '*' or 'storage.*') are not allowed. For more\ninformation see\n[IAM Overview](https://cloud.google.com/iam/docs/overview#permissions).",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "TestIamPermissionsResponse": {
      "description": "Response message for `TestIamPermissions` method.",
      "id": "TestIamPermissionsResponse",
      "properties": {
        "permissions": {
          "description": "A subset of `TestPermissionsRequest.permissions` that the caller is\nallowed.",
          "items": {
            "type": "string"
          },
          "type": "array"
        }
      },
      "type": "object"
    },
    "Vertex": {
      "description": "A 2D coordinate in an image. The origin is the top-left.",
      "id": "Vertex",
      "properties": {
        "x": {
          "description": "X coordinate.",
          "format": "float",
          "type": "number"
        },
        "y": {
          "description": "Y coordinate.",
          "format": "float",
          "type": "number"
        }
      },
      "type": "object"
    }
  },
  "servicePath": "",
  "title": "Cloud Healthcare API",
  "version": "v1alpha2",
  "version_module": true
}