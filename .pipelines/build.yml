# This contains common build steps

steps:
- script: |
    mkdir -p '$(GOBIN)'
    mkdir -p '$(GOPATH)/pkg'
    mkdir -p '$(modulePath)'
    shopt -s extglob
    shopt -s dotglob
    mv !(gopath) '$(modulePath)'
    echo '##vso[task.prependpath]$(GOBIN)'
    echo '##vso[task.prependpath]$(GOROOT)/bin'
  displayName: 'Set up the Go workspace'

- script: |
    go get -u golang.org/x/lint/golint
    golint $(find . -type f -name '*.go' -not -path "./vendor/*") > /tmp/lint.out
    cat /tmp/lint.out
    if [ -s /tmp/lint.out ]; then
        echo -e "\e[101;97m golint FAILED \e[0m"``
        exit 1
    else
        echo -e "\e[42;97m golint SUCCEEDED \e[0m"
    fi
  workingDirectory: '$(modulePath)'
  displayName: 'Go lint'

- script: |
    if go vet -v ./...; then
        echo -e "\e[42;97m govet SUCCEEDED \e[0m"
    else
        echo -e "\e[101;97m govet FAILED \e[0m"``
        exit 1
    fi
  workingDirectory: '$(modulePath)'
  displayName: 'Go vet'

- script: |
    go version
    echo -e "\e[44;97m Compiling ... \e[0m"
    if  go install -v ./cmd/appgw-ingress; then
        chmod -R 777 bin
        echo -e "\e[42;97m Build SUCCEEDED \e[0m"
    else
        echo -e "\e[101;97m Build FAILED \e[0m"
        exit 1
    fi
  workingDirectory: '$(modulePath)'
  displayName: 'Get dependencies and build'

- script: |
    go get github.com/jstemmer/go-junit-report
    go get github.com/axw/gocov/gocov
    go get github.com/AlekSi/gocov-xml
    go get github.com/matm/gocov-html
    go test -timeout 80s -v -coverprofile=coverage.txt -covermode count ./... > testoutput.txt || { echo "go test returned non-zero"; cat testoutput.txt; exit 1; }
    cat testoutput.txt | go-junit-report > report.xml
    gocov convert coverage.txt > coverage.json
    gocov-xml < coverage.json > coverage.xml
    mkdir coverage
    gocov-html < coverage.json > coverage/index.html
  workingDirectory: '$(modulePath)'
  displayName: 'Run unit tests with code coverage'

- task: PublishTestResults@2
  continueOnError: true
  condition: succeededOrFailed()
  inputs:
    failTaskOnFailedTests: true
    testRunner: JUnit
    testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml


- task: PublishCodeCoverageResults@1
  continueOnError: true
  condition: succeededOrFailed()
  inputs:
    codeCoverageTool: Cobertura
    summaryFileLocation: $(modulePath)/coverage.xml
    reportDirectory: $(modulePath)/coverage
